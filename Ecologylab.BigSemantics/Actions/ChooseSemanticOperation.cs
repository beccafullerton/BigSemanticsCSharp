//
//  ChooseSemanticAction.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/16/10.
//  Copyright 2010 Interface Ecology Lab. 
//

using System;
using System.Collections.Generic;
using Simpl.Serialization.Attributes;
using Ecologylab.BigSemantics.Actions;

namespace Ecologylab.BigSemantics.Actions 
{
	/// <summary>
	/// missing java doc comments or could not find the source file.
	/// </summary>
	[SimplInherit]
	[SimplTag("choose")]
    public class ChooseSemanticOperation : SemanticOperation
	{
		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplNoWrap]
		[SimplCollection("case")]
        private List<IfSemanticOperation> cases;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplComposite]
        private Otherwise otherwise;

        public ChooseSemanticOperation()
		{ }

        public List<IfSemanticOperation> Cases
		{
			get{return cases;}
			set{cases = value;}
		}

		public Otherwise Otherwise
		{
			get{return otherwise;}
			set{otherwise = value;}
		}

	    public override String GetOperationName()
	    {
		    return SemanticOperationStandardMethods.Choose;
	    }

	    public override void HandleError()
	    {
	    }

	    public override Object Perform(Object obj)
	    {
		    int selectedCaseIndex = -1;
            int state = (Int32)semanticOperationHandler.GetOperationState(this, "state", INIT);
		    if (state == INIT)
		    {
			    state = INTER;

			    if (cases != null)
				    for (int i = 0; i < cases.Count; ++i)
				    {
                        if (semanticOperationHandler.CheckConditionsIfAny(cases[i]))
					    {
                            semanticOperationHandler.SetOperationState(this, "select", i);
						    break;
					    }
				    }
		    }

		    if (selectedCaseIndex >= 0)
		    {
			    IfSemanticOperation aCase = cases[selectedCaseIndex];
			    List<SemanticOperation> nestedSemanticActions = aCase.NestedSemanticActionList;
			    foreach (SemanticOperation nestedSemanticAction in nestedSemanticActions)
                    semanticOperationHandler.HandleSemanticOperation(nestedSemanticAction, documentParser,
						    sessionScope);
		    }
		    else
		    {
			    if (otherwise != null)
			    {
				    List<SemanticOperation> otherwiseActions = otherwise.NestedSemanticActionList;
				    foreach (SemanticOperation action in otherwiseActions)
				    {
                        semanticOperationHandler.HandleSemanticOperation(action, documentParser, sessionScope);
				    }
			    }
		    }

		    return null;
	    }

        public override void SetNestedOperationState(String name, Object value)
	    {
		    if (cases != null)
		    {
			    foreach (IfSemanticOperation aCase in cases)
			    {
				    SemanticOperationHandler handler = SemanticOperationHandler;
                    aCase.SemanticOperationHandler = handler;
                    SemanticOperationHandler.SetOperationState(aCase, name, value);
                    aCase.SetNestedOperationState(name, value);
			    }
		    }
		    if (otherwise != null)
		    {
                semanticOperationHandler.SetOperationState(otherwise, name, value);
                otherwise.SetNestedOperationState(name, value);
		    }
	    }
	}
}
