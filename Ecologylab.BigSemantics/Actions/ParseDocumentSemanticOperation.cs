//
//  ParseDocumentSemanticAction.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/16/10.
//  Copyright 2010 Interface Ecology Lab. 
//

using System;
using System.Collections.Generic;
using Ecologylab.BigSemantics.MetadataNS.Builtins;
using Simpl.Serialization.Attributes;
using Ecologylab.BigSemantics.Actions;

namespace Ecologylab.BigSemantics.Actions 
{
	/// <summary>
	/// missing java doc comments or could not find the source file.
	/// </summary>
	[SimplInherit]
	[SimplTag("parse_document")]
    public class ParseDocumentSemanticOperation : SemanticOperation
	{
		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplScalar]
		[SimplHints(new Hint[] { Hint.XmlAttribute })]
		private Boolean now;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplScalar]
		[SimplHints(new Hint[] { Hint.XmlAttribute })]
		private Boolean onlyPickTopDocuments;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplScalar]
		[SimplHints(new Hint[] { Hint.XmlAttribute })]
		private Int32 numberOfTopDocuments;

		public ParseDocumentSemanticOperation()
		{ }

		public Boolean Now
		{
			get{return now;}
			set{now = value;}
		}

		public Boolean OnlyPickTopDocuments
		{
			get{return onlyPickTopDocuments;}
			set{onlyPickTopDocuments = value;}
		}

		public Int32 NumberOfTopDocuments
		{
			get{return numberOfTopDocuments;}
			set{numberOfTopDocuments = value;}
		}

	    public override string GetOperationName()
	    {
            return SemanticOperationStandardMethods.ParseDocument;
	    }

	    public override void HandleError()
	    {
	    }

	    public override object Perform(object obj)
	    {
	        return PerformBasic(obj);
	    }

        public Object PerformBasic(Object obj)
        {
            if (Now)
            {
                Document document = GetOrCreateDocument(documentParser /*, linkType*/);

                //ParsedURL purl = (ParsedURL) getArgumentObject(SemanticActionNamedArguments.CONTAINER_LINK);
                Document source = (Document)SemanticOperationHandler.SemanticOperationVariableMap.Get(SemanticOperationKeyWords.Metadata);

                if (documentParser != null)
                {
                    //document.queueDownload();
                }
                else
                {
                    document.GetOrConstructClosure().GetMetadata();
                }

            }
            return null;
        }
	}
}
