//
// RichArtifactDeclaration.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2015 Interface Ecology Lab. 
//


using Ecologylab.BigSemantics.MetaMetadataNS;
using Ecologylab.BigSemantics.MetadataNS;
using Ecologylab.BigSemantics.MetadataNS.Builtins;
using Ecologylab.Collections;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.BigSemantics.MetadataNS.Builtins.Declarations 
{
	[SimplInherit]
	public class RichArtifactDeclaration<M> : Metadata where M : Metadata
	{
		[SimplComposite]
		[SimplWrap]
		[SimplScope("repository_media")]
		[MmName("media")]
		private M media;

		[SimplCollection]
		[SimplScope("creative_acts_scope")]
		[MmName("creative_acts")]
		private List<CreativeAct> creativeActs;

		[SimplCollection("document")]
		[MmName("outlinks")]
		private List<Document> outlinks;

		public RichArtifactDeclaration()
		{ }

		public RichArtifactDeclaration(MetaMetadataCompositeField mmd) : base(mmd) { }


		public M Media
		{
			get{return media;}
			set
			{
				if (this.media != value)
				{
					this.media = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<CreativeAct> CreativeActs
		{
			get{return creativeActs;}
			set
			{
				if (this.creativeActs != value)
				{
					this.creativeActs = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<Document> Outlinks
		{
			get{return outlinks;}
			set
			{
				if (this.outlinks != value)
				{
					this.outlinks = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
