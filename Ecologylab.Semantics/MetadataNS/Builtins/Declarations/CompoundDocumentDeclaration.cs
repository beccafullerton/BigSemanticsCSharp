//
// CompoundDocumentDeclaration.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2012 Interface Ecology Lab. 
//


using Ecologylab.Collections;
using Ecologylab.Semantics.MetaMetadataNS;
using Ecologylab.Semantics.MetadataNS;
using Ecologylab.Semantics.MetadataNS.Builtins;
using Ecologylab.Semantics.MetadataNS.Scalar;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.Semantics.MetadataNS.Builtins.Declarations 
{
	[SimplInherit]
	public class CompoundDocumentDeclaration : Document
	{
		/// <summary>
		/// For debugging. Type of the structure recognized by information extraction.
		/// </summary>
		[SimplScalar]
		private MetadataString pageStructure;

		/// <summary>
		/// The search query
		/// </summary>
		[SimplScalar]
		[SimplHints(new Hint[] {Hint.XmlLeaf})]
		private MetadataString query;

		/// <summary>
		/// Clippings that this document contains.
		/// </summary>
		[SimplCollection]
		[SimplScope("repository_clippings")]
		[MmName("clippings")]
		private List<Clipping> clippings;

		[SimplComposite]
		[MmName("root_document")]
		private CompoundDocument rootDocument;

		public CompoundDocumentDeclaration()
		{ }

		public CompoundDocumentDeclaration(MetaMetadataCompositeField mmd) : base(mmd) { }


		public MetadataString PageStructure
		{
			get{return pageStructure;}
			set
			{
				if (this.pageStructure != value)
				{
					this.pageStructure = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString Query
		{
			get{return query;}
			set
			{
				if (this.query != value)
				{
					this.query = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<Clipping> Clippings
		{
			get{return clippings;}
			set
			{
				if (this.clippings != value)
				{
					this.clippings = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public CompoundDocument RootDocument
		{
			get{return rootDocument;}
			set
			{
				if (this.rootDocument != value)
				{
					this.rootDocument = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
