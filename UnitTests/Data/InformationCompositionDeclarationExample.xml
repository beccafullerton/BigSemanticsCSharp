<information_composition_declaration xmlns:simpl="http://ecologylab.net/research/simplGuide/serialization/index.html">
  <metadata>
    <image_search mm_name="google_image_search" location="https://www.google.com/search?tbm=isch&amp;hl=en&amp;q=watergate"></image_search>
    <compound_document mm_name="html" location="http://www3.hilton.com/en/hotels/texas/hilton-anatole-DFWANHH/index.html" simpl:id="15350066">
      <title>Dallas Hotels - Dallas Luxury Hotel - Hilton Anatole - Dallas, TX</title>
      <additional_locations>
        <location>http://www1.hilton.com/en_US/hi/hotel/DFWANHH/index.do;jsessionid=FA645984CF5E8826E0DD207A9049F0AE.etc42</location>
      </additional_locations>
      <clippings>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Hotels and Resorts" simpl:id="13245146">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/xx/en_US/img/brand/brand_nav/secondary/HH_offersnav.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="13245146"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Hotels and Resorts - Resorts" simpl:id="29140102">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/xx/en_US/img/brand/brand_nav/secondary/HH_resortssmall.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="29140102"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Hotels and Resorts - Mobley" simpl:id="9740942">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/xx/en_US/img/brand/brand_nav/secondary/HH_mobley.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="9740942"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="static map image" simpl:id="30100654">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <outlink>
            <compound_document mm_name="html" location="http://www1.hilton.com/en/hotels/texas/hilton-anatole-DFWANHH/maps-directions/index.html"></compound_document>
          </outlink>
          <media>
            <image location="http://www1.hilton.com/skins/en_US/HI/img/map.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="30100654"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Exterior" simpl:id="12159494">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_exterior_1_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="12159494"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anaole Hotel, Dallas, Tx - 2 Double Beds Atrium Bldg" simpl:id="806126">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_towerdouble_16_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="806126"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Tower King Guest Room" simpl:id="15320466">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_towerking_17_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="15320466"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Atrium King" simpl:id="18586052">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_atriumkingrm_18_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="18586052"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Suite Parlor" simpl:id="26811303">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_eecparloratrium_19_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="26811303"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Mary Kay Grand Suite" simpl:id="47397">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_marykaysuite_20_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="47397"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Reagan Grand Presidential" simpl:id="16350503">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_reagangrand_21_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="16350503"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Thatcher Presidential" simpl:id="12433070">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_thatchersuite_22_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="12433070"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Parlor Hospitality Suite" simpl:id="23971273">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_hospitalityparlor_23_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="23971273"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - King Accessible Room" simpl:id="9568605">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_kingaccess_24_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="9568605"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Double Guest Room Bath" simpl:id="19375260">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_bathroom_25_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="19375260"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Executive Lounge" simpl:id="9012615">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_execlounge_26_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="9012615"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Fishing Sculpture" simpl:id="2678600">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_fishingsculpture_2_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="2678600"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Flames of Life Statue" simpl:id="27473506">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_flamesoflife_14_81x50_FitToBoxSmallDimension_LowerCenter.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="27473506"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - West Lobby Seating Area" simpl:id="4437435">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_westlobby_5_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="4437435"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Laughing Buddha" simpl:id="6274035">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_laughingbuddha_16_81x50_FitToBoxSmallDimension_UpperCenter.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="6274035"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Goddess on Lion" simpl:id="29033454">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_wwgoddess_17_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="29033454"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Hand painted plate" simpl:id="32174021">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_wwplate_18_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="32174021"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Elephant" simpl:id="28277251">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_chantillyfoyer_19_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="28277251"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Jasperware Vase" simpl:id="12128454">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_wedgwoodvase_13_81x50_FitToBoxSmallDimension_UpperCenter.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="12128454"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Jade Horse Nana" simpl:id="30851063">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_jadehorse_14_81x50_FitToBoxSmallDimension_LowerCenter.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="30851063"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Golden Buddha" simpl:id="16886812">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_nanabuddha_15_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="16886812"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - The Gossips" simpl:id="22021341">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_thegossips_23_81x50_FitToBoxSmallDimension_UpperCenter.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="22021341"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Brick Sculpture Murals" simpl:id="2260302">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_bricksculpture_4_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="2260302"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Atrium II Asian Gardens" simpl:id="6586859">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_atrium1_27_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="6586859"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Reflections of the Day" simpl:id="29486315">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_atrium2_28_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="29486315"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Nebula at Night" simpl:id="290876">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_atrium3_29_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="290876"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Jade Pavilion at Night" simpl:id="1269514">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_atrium4_30_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="1269514"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Verandah Indoor Pool" simpl:id="21669571">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_verandahpool_10_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="21669571"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Verandah Outdoor Pool" simpl:id="26895259">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_outdoorpool_9_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="26895259"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Verandah Fitness Center" simpl:id="3562640">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_fitnesscenter_7_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="3562640"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Verandah Free Weights" simpl:id="24230975">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_weights2_30_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="24230975"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Boxing Gym" simpl:id="21101708">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_boxinggym_6_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="21101708"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Basketball Gym" simpl:id="25691459">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_bballgym_5_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="25691459"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Welcome to VSpa!" simpl:id="18164750">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_vspa1_34_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="18164750"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - VSpa Lounge" simpl:id="13572035">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_vspa3_33_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="13572035"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Glass Artworks at VSpa" simpl:id="17306284">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_vspa2_35_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="17306284"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Nebula in Atrium II" simpl:id="11632138">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_atrium6_32_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="11632138"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Nebula at Night" simpl:id="699659">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_atrium7_33_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="699659"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Chantilly Ballroom" simpl:id="17333216">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_chantilly_3_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="17333216"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Chantilly Ballroom" simpl:id="26707473">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_chantilly2_4_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="26707473"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Grand Ballroom" simpl:id="15307386">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_grandblrm_5_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="15307386"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Stemmons Ballroom" simpl:id="24955695">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_stemmonsblrm_6_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="24955695"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Coronado Ballroom" simpl:id="12338315">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_coronadoblrm_7_81x50_FitToBoxSmallDimension_LowerCenter.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="12338315"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Wedgwood Ballroom" simpl:id="23862222">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_wedgwoodblrm_8_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="23862222"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Wedgwood Ballroom Foyer" simpl:id="30675222">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_wedgwoodfoyer_9_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="30675222"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Khmer Pavilion" simpl:id="24390742">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_khmer_10_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="24390742"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Peacock Terrace" simpl:id="31188783">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_peacockterrace_11_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="31188783"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - West Wing Foyer" simpl:id="4929007">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_wwfoyer_12_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="4929007"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - West Wing Hallway" simpl:id="18635912">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_wwhallway_13_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="18635912"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - President&#39;s Boardroom" simpl:id="12705649">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_presboardroom_14_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="12705649"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Trinity Ii Multi-use Room" simpl:id="24006109">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_trinity2_15_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="24006109"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Man at Berlin Wall" simpl:id="24546058">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_trinity6_50_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="24546058"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Trinity Corridor Exterior" simpl:id="12661766">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_trinity1_50_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="12661766"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Trinity Corridor Entrance" simpl:id="766446">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_trinity2_51_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="766446"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Clay Warrior" simpl:id="17957281">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_trinity3_56_81x50_FitToBoxSmallDimension_UpperCenter.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="17957281"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Sandstone Pavilion" simpl:id="5124808">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_trinity4_53_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="5124808"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Trinity Rotunda" simpl:id="26120125">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_trinity5_54_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="26120125"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Business Center" simpl:id="14456085">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_businesscenter_36_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="14456085"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Workstations" simpl:id="7002929">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_workstations_2_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="7002929"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Gossip Patio and Fire Pit" simpl:id="115186">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_firepitdining_55_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="115186"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Media Bar Seating" simpl:id="2568172">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_mediabar1_57_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="2568172"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - iBar at Media Bar" simpl:id="21121915">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_mediabar2_58_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="21121915"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Media Grill Dining Room" simpl:id="21506279">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_mediabar3_59_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="21506279"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Counter Offer - Atrium II" simpl:id="33469350">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_counter1_60_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="33469350"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Counter Offer" simpl:id="25212153">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_counter2_61_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="25212153"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Counter Offer Wines" simpl:id="29801427">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_counter3_62_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="29801427"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Gossip Bar Lounge" simpl:id="21078831">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_gossipareadown_4_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="21078831"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Gossip Bar" simpl:id="21218339">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_gossipstools2_66_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="21218339"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Gossip Bar" simpl:id="19795503">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_gossipstools3_67_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="19795503"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Gossip Bar" simpl:id="5535786">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_gossipmain_5_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="5535786"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Media Grill + Bar" simpl:id="9713235">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/hh_mediagrillbar_6_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="9713235"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Dallas Skyline" simpl:id="26986262">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_dest1_71_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="26986262"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx -Anatole Sculpture Park" simpl:id="30649454">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_dest2_72_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="30649454"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Park Bench over Flowers" simpl:id="10626229">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_dest3_73_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="10626229"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
        <image_clipping xpath="/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img/img" caption="Hilton Anatole Hotel, Dallas, Tx - Hotel Exterior from Park" simpl:id="3166926">
          <source_doc>
            <compound_document simpl:ref="15350066"/>
          </source_doc>
          <media>
            <image location="http://www1.hilton.com/resources/media/hi/DFWANHH/en_US/img/shared/full_page_image_gallery/thumb/HH_dest4_74_81x50_FitToBoxSmallDimension_Center.jpg">
              <clippings_this_is_in>
                <image_clipping simpl:ref="3166926"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
      </clippings>
    </compound_document>
    <trip_advisor location="http://www.tripadvisor.com/Hotel_Review-g30196-d98474-Reviews-The_Driskill-Austin_Texas.html" overall_rating="Ranked #13 of 187 hotels in Austin">
      <title>The Driskill</title>
      <place mm_name="place" location="http://maps.google.com/maps?q=604%20Brazos%20St,78701" street_address="604 Brazos St" locality="Austin" region="TX" postal_code="78701"></place>
      <reviews>
        <product_review mm_name="reviews" description="This hotel was great for my stay in Austin. I wish I had more time to enjoy it. The rooms are spacious, the staff was nice, and the location was perfect for going out on West 6th street, which has a lot of great restaurants and fun bars. There is a restaurant downstairs with a reasonable breakfast, complimentary coffee in...&#10;&#10;&#10;More" rating="4 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="We had a wonderful one-night stay at the Driskill! The staff was friendly and we loved the 1886 Bakery and Cafe. I wish we could have stayed longer but we will be back. There was not a pool but we didn&#39;t mind because Austin has a lot of local parks and pools. The Happy Hour at the bar was great...&#10;&#10;&#10;More" rating="5 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="We came here for our honeymoon. The hotel was beautiful as well as the room. The front desk was very friendly. However our room must have been close to the band downstairs because we could hear not only hear the music but also feel the floor and bed vibrating until late into the night. Not very romantic! We also attempted...&#10;&#10;&#10;More" rating="2 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="We had only one night in Austin and wanted to stay downtown near 6th street. It&#39;s so easy to walk to the bars and restaurants. Got a great rate on a small room. Be sure to ask for a non-pet floor if you have allergies. Everyone was friendly and the hotel is lovely." rating="4 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="We enjoyed the Divine Driskill while attending the wedding of a daughter of dear friends in the city. We rested, reaf and luxuriated in the beautiful, quiet room and exquisite furnishings during our unscheduled time, as well as enjoyed the period details of this beautiful, historic hotel. The hotel was at capacity when we were there so allow extra planning...&#10;&#10;&#10;More" rating="5 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="I&#39;ve always wanted to stay at the Driskill. Like their adverts say, it is probably Texas&#39; favorite hotel.&#10;My wife and I stayed there in last weekend. The lobby is stunning. We found the front desk staff terrific.&#10;We ordered two meals from room service. They were terribly slow but made up for it in the quality of service.&#10;That...&#10;&#10;&#10;More" rating="4 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="In addition to being a unique, glamorous, and beautiful historic hotel, the Driskill chefs&#39; offerings are as delicious as they are creative. The bakery features the most divine chocolate cake I&#39;ve ever had in my life. The 1886 Chocolate Cake is so good that none other can ever measure up. It is moist, dense, and very chocolaty. Even the icing,...&#10;&#10;&#10;More" rating="5 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="Recently stayed at the Driskill for a 3 day anniversary weekend and really enjoyed our stay! Picture-perfect historical building with a Texas flare. 1886 Cafe downstairs was great for dessert and coffee late night as well as full breakfast and brunch in the morning. Great bar/lounge on site was nice to hang out in even for people who don&#39;t drink...&#10;&#10;&#10;More" rating="5 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="My husband chose this hotel and it was in a very good location and the atmosphere was really nice. We went for drinks in the bar and again ambience good. However, the actual drinks served were not very good. In fact, the margarita was one of the worst drinks I have had anywhere!! The others were acceptable. Advice: don&#39;t use...&#10;&#10;&#10;More" rating="4 of 5 stars"></product_review>
        <product_review mm_name="reviews" description="I am writing this review from the inlaid mahogany oval writing desk in my room (#1003) at the Driskill. What a relief it is to be in such spacious accommodations after being routinely jammed into tight hotel rooms. The ceilings are high, there is lots of space between the two queen size beds, the bedside table is huge instead of...&#10;&#10;&#10;More" rating="5 of 5 stars"></product_review>
      </reviews>
    </trip_advisor>
    <hotel mm_name="homeaway" location="http://www.homeaway.com/vacation-rental/p100000" bedrooms="4" sleeps="8">
      <description>If you want to experience Austin whilst staying in one of the city&#39;s central mid-century modern neighborhoods, now you can.  &#10;Surrounded by tree lined streets and only minutes from Downtown, this gorgeous house is the perfect location for those looking for a comfortable base for all Austin events.  &#10;Recently refurbished, has been professionally Interior Designed to give a stylish and eclectic feel, unlike anywhere you will find. This is a fun and welcoming house that can easily accommodate 8 guests, with all the amenities for children to make your stay stress free and memorable. Relax outside on the candle lit patio with a margarita or settled down on one of the comfortable sofas to watch your favorite movie. &#10;In a quiet, safe neighborhood, great local amenities include the famous Alamo Drafthouse movie theater; restaurants; cafes; grocery stores. Just off Shoal Creek cycling route, and 20 minutes from challenging City Park motor cycle and mountain bike trail.   More Details</description>
      <place mm_name="place" telephone="+1 512-590 5343">
        <map mm_name="map" satellites="var mapData = {location: [{a:&#39;%33%30%2E%33%34%38&#39;, b:&#39;%2D%39%37%2E%37%34%37&#39;, id:&#39;100000&#39;, exact:true, zoom:10, type:&#39;u&#39;}], mType: &#39;property&#39;};"></map>
      </place>
      <reviews>
        <product_review mm_name="reviews" rating="5 out of 5"></product_review>
        <product_review mm_name="reviews" rating="5 out of 5"></product_review>
        <product_review mm_name="reviews" rating="5 out of 5"></product_review>
        <product_review mm_name="reviews" rating="5 out of 5"></product_review>
        <product_review mm_name="reviews" rating="5 out of 5"></product_review>
      </reviews>
    </hotel>
    <hotel mm_name="airbnb" location="http://www.airbnb.com/rooms/72247"></hotel>
    <imdb_title location="http://www.imdb.com/title/tt0137523/" overall_rating="8.9" storyline="A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground &#34;fight clubs&#34; forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.&#10;&#10;Written by&#160;Anonymous&#160;&#160;" mpaa_rating="Rated R for disturbing and graphic depiction of violent anti-social behavior, sexuality and language" theater_release="15 October 1999" tagline="When you wake up in a different place at a different time, can you wake up as a different person?  &#187;">
      <title>Fight Club&#10;&#10;&#10;(1999)</title>
      <abstract>An insomniac office worker and a devil-may-care soap maker form an underground fight club that transforms into a violent revolution.</abstract>
      <directors>
        <document mm_name="directors" location="http://www.imdb.com/name/nm0000399/">
          <title>David Fincher</title>
        </document>
      </directors>
      <writers>
        <document mm_name="writers" location="http://www.imdb.com/name/nm0657333/">
          <title>Chuck Palahniuk</title>
        </document>
        <document mm_name="writers" location="http://www.imdb.com/name/nm0880243/">
          <title>Jim Uhls</title>
        </document>
      </writers>
      <genres>
        <document mm_name="genres" location="http://www.imdb.com/genre/Drama">
          <title>Drama</title>
        </document>
      </genres>
      <title_photos>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTM4MjA2MzI0OF5BMl5BanBnXkFtZTcwNjU3ODMzMw@@._V1._CR341,0,1365,1365_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTgxNzY2NjIxOV5BMl5BanBnXkFtZTcwNzU3ODMzMw@@._V1._CR299,0,1449,1449_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTYxMzY4OTE3MV5BMl5BanBnXkFtZTYwOTM5OTk0._V1._CR0,0,267,267_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BNDY1MzE3MTI0Nl5BMl5BanBnXkFtZTcwNDIwNTI5Mw@@._V1._CR356,0,1335,1335_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMjk3NTYyMzc4Nl5BMl5BanBnXkFtZTcwODU3ODMzMw@@._V1._CR299,0,1449,1449_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTMzNDU3NDkwMF5BMl5BanBnXkFtZTYwMDc1Mzc3._V1._CR88,0,374,374_SS99_.jpg"></image>
      </title_photos>
    </imdb_title>
    <imdb_title location="http://www.imdb.com/title/tt0110912/" overall_rating="9.0" storyline="Jules Winnfield and Vincent Vega are two hitmen who are out to retrieve a suitcase stolen from their employer, mob boss Marsellus Wallace. Wallace has also asked Vincent to take his wife Mia out a few days later when Wallace himself will be out of town. Butch Coolidge is an aging boxer who is paid by Wallace to lose his next fight. The lives of these seemingly unrelated people are woven together comprising of a series of funny, bizarre and uncalled-for incidents.&#10;&#10;Written by&#160;Soumitra&#160;&#160;" mpaa_rating="Rated R for strong graphic violence and drug use, pervasive strong language and some sexuality" theater_release="14 October 1994" tagline="From the creators of &#39;True Romance&#39; &amp; &#39;Reservoir Dogs&#39;  &#187;">
      <title>Pulp Fiction&#10;&#10;&#10;(1994)</title>
      <abstract>The lives of two mob hit men, a boxer, a gangster&#39;s wife, and a pair of diner bandits intertwine in four tales of violence and redemption.</abstract>
      <directors>
        <document mm_name="directors" location="http://www.imdb.com/name/nm0000233/">
          <title>Quentin Tarantino</title>
        </document>
      </directors>
      <writers>
        <document mm_name="writers" location="http://www.imdb.com/name/nm0000233/">
          <title>Quentin Tarantino</title>
        </document>
        <document mm_name="writers" location="http://www.imdb.com/name/nm0000812/">
          <title>Roger Avary</title>
        </document>
        <document mm_name="imdb_title" location="http://www.imdb.com/title/tt0110912/fullcredits">
          <title>and 1 more credit</title>
        </document>
      </writers>
      <genres>
        <document mm_name="genres" location="http://www.imdb.com/genre/Crime">
          <title>Crime</title>
        </document>
        <document mm_name="genres" location="http://www.imdb.com/genre/Thriller">
          <title>Thriller</title>
        </document>
      </genres>
      <title_photos>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTM0NzI1NDgzM15BMl5BanBnXkFtZTcwMzgxMjIyNw@@._V1._CR337,0,1374,1374_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTUzNjMxNjUwN15BMl5BanBnXkFtZTcwNDgxMjIyNw@@._V1._CR343,0,1362,1362_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTU2Mjc0MTg4MF5BMl5BanBnXkFtZTcwOTA0MzU5Ng@@._V1._CR0,0,1310,1310_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTUwNTE0NjU2Ml5BMl5BanBnXkFtZTcwMDE0MzU5Ng@@._V1._CR353,0,1341,1341_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMjIyNTU4MjY4NF5BMl5BanBnXkFtZTcwODA0MzU5Ng@@._V1._CR337,0,1373,1373_SS99_.jpg"></image>
        <image mm_name="title_photos" location="http://ia.media-imdb.com/images/M/MV5BMTg3MDQ5NTgwOV5BMl5BanBnXkFtZTcwNzA0MzU5Ng@@._V1._CR364,0,1320,1320_SS99_.jpg"></image>
      </title_photos>
    </imdb_title>
    <compound_document location="http://signup.netflix.com/">
      <additional_locations>
        <location>http://movies.netflix.com/Movie/A_Dangerous_Method/70158333</location>
      </additional_locations>
      <clippings>
        <clipping mm_name="clippings"></clipping>
      </clippings>
      <root_document mm_name="root_document"></root_document>
    </compound_document>
    <patent_classification location="http://www.uspto.gov/web/patents/classification/uspc725/defs725.htm" patent_class="725">
      <title>INTERACTIVE VIDEO&#10;DISTRIBUTION SYSTEMS</title>
      <description>This class contains interactive video distribution processes, systems, and&#10;elements thereof, which are characterized by point-to-multipoint&#10;system configurations, and which are used for the unidirectional&#10;distribution or delivery of motion video data resulting from interactions&#10;between systems operators (access or service providers) or&#10;users (subscribers) and systems elements. These&#10;systems include dedicated communications systems, such&#10;as television distribution systems, which primarily distribute&#10;or deliver motion video data in the manner indicated, but&#10;which may, in addition, provide a framework for&#10;further, diverse data communications or services in either&#10;unidirectional or bidirectional form. Typically, system&#10;operators interface with transmitter-side elements or users&#10;interface with receiver-side elements in order to facilitate, through&#10;interaction with such elements, the dynamic control of&#10;data processing or data flow at various points in the systems. This&#10;interaction is typically occasional or intermittent in nature.</description>
    </patent_classification>
    <image mm_name="google_patent_image" location="http://bks8.books.google.com/patents?id=kz_NAAAAEBAJ&amp;printsec=abstract&amp;img=1&amp;zoom=1&amp;sig=ACfU3U3KH5aI9FWAEoN6HkNrmXZT4i7ejg"></image>
    <amazon_list mm_name="amazon_wish_list" location="http://www.amazon.com/gp/registry/wishlist/ref=wish_list"></amazon_list>
    <amazon_list mm_name="amazon_bestseller_list" location="http://www.amazon.com/gp/bestsellers/books/6">
      <title>Cookbooks, Food &amp; Wine</title>
      <items>
        <amazon_product mm_name="items" location="http://www.amazon.com/Wheat-Belly-Lose-Weight-Health/dp/1609611543/ref=zg_bs_6_1" price="$15.43" overall_rating="4.4 out of 5 stars">
          <title>Wheat Belly: Lose the Wheat, Lose the Weight, and Find Your Path Back to Health</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Wheat-Belly-Weight-Health-ebook/dp/B00571F26Y/ref=zg_bs_6_2" price="$9.45" overall_rating="4.4 out of 5 stars">
          <title>Wheat Belly: Lose the Wheat, Lose the Weight, and Find Your Path Back To Health</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Fix-Freeze-Feast-Money-Saving-ebook/dp/B004A7YILQ/ref=zg_bs_6_3" price="$2.51" overall_rating="4.5 out of 5 stars">
          <title>Fix, Freeze, Feast: The Delicious, Money-Saving Way to Feed Your Family</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Practical-Paleo-Customized-Whole-Foods-Lifestyle/dp/1936608758/ref=zg_bs_6_4" price="$21.47" overall_rating="5.0 out of 5 stars">
          <title>Practical Paleo: A Customized Approach to Health and a Whole-Foods Lifestyle</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Forks-Over-Knives-Cookbook-Plant-Based/dp/1615190619/ref=zg_bs_6_5" price="$11.37" overall_rating="3.8 out of 5 stars">
          <title>Forks Over Knives - The Cookbook: Over 300 Recipes for Plant-Based Eating All Through the Year</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Dearie-Remarkable-Julia-Child-ebook/dp/B007MDDDRU/ref=zg_bs_6_6" price="$14.99" overall_rating="4.8 out of 5 stars">
          <title>Dearie: The Remarkable Life of Julia Child</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Dearie-Remarkable-Life-Julia-Child/dp/0307272222/ref=zg_bs_6_7" price="$17.42" overall_rating="4.8 out of 5 stars">
          <title>Dearie: The Remarkable Life of Julia Child</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Paleo-Solution-Original-ebook/dp/B00466H5MU/ref=zg_bs_6_8" price="$9.98" overall_rating="4.5 out of 5 stars">
          <title>The Paleo Solution: The Original Human Diet</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Ball-Complete-Book-Home-Preserving/dp/0778801314/ref=zg_bs_6_9" price="$13.31" overall_rating="4.6 out of 5 stars">
          <title>Ball Complete Book of Home Preserving</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Blood-Sugar-Solution-UltraHealthy/dp/031612737X/ref=zg_bs_6_10" price="$17.46" overall_rating="3.9 out of 5 stars">
          <title>The Blood Sugar Solution: The UltraHealthy Program for Losing Weight, Preventing Disease, and Feeling Great Now!</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Skinny-Rules-Nonnegotiable-ebook/dp/B005OCYQR2/ref=zg_bs_6_11" price="$12.99" overall_rating="4.5 out of 5 stars">
          <title>The Skinny Rules: The Simple, Nonnegotiable Principles for Getting to Thin</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Forks-Over-Knives-Plant-Based-Health/dp/1615190457/ref=zg_bs_6_12" price="$10.98" overall_rating="4.4 out of 5 stars">
          <title>Forks Over Knives: The Plant-Based Way to Health</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Engine-Diet-Firefighters-Save-Your-Life/dp/0446506699/ref=zg_bs_6_13" price="$14.86" overall_rating="4.5 out of 5 stars">
          <title>The Engine 2 Diet: The Texas Firefighter&#39;s 28-Day Save-Your-Life Plan that Lowers Cholesterol and Burns Away the Pounds</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Juicing-Bible-Pat-Crocker/dp/0778801810/ref=zg_bs_6_14" price="$13.79" overall_rating="4.4 out of 5 stars">
          <title>The Juicing Bible</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Yes-Chef-A-Memoir-ebook/dp/B005SHQGBM/ref=zg_bs_6_15" price="$12.99" overall_rating="4.5 out of 5 stars">
          <title>Yes, Chef: A Memoir</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/George-Stellas-Livin-Low-Carb/dp/0743269977/ref=zg_bs_6_16" price="$12.91" overall_rating="4.5 out of 5 stars">
          <title>George Stella&#39;s Livin&#39; Low Carb: Family Recipes Stella Style</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Omnivores-Dilemma-Natural-History/dp/0143038583/ref=zg_bs_6_17" price="$11.56" overall_rating="4.5 out of 5 stars">
          <title>The Omnivore&#39;s Dilemma: A Natural History of Four Meals</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Nourishing-Traditions-Challenges-Politically-Dictocrats/dp/0967089735/ref=zg_bs_6_18" price="$15.51" overall_rating="4.6 out of 5 stars">
          <title>Nourishing Traditions:  The Cookbook that Challenges Politically Correct Nutrition and the Diet Dictocrats</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Barefoot-Contessa-Foolproof-Recipes-Trust/dp/0307464873/ref=zg_bs_6_19" price="$22.23">
          <title>Barefoot Contessa Foolproof: Recipes You Can Trust</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Why-We-Get-Fat-ebook/dp/B003WUYOQ6/ref=zg_bs_6_20" price="$7.99" overall_rating="4.5 out of 5 stars">
          <title>Why We Get Fat: And What to Do About It</title>
        </amazon_product>
      </items>
    </amazon_list>
    <product mm_name="newegg_product" location="http://www.newegg.com/Product/Product.aspx?Item=N82E16813128532" overall_rating="4 out of 5 eggs" num_reviews="21" simpl:id="9909880">
      <clippings>
        <image_clipping simpl:id="805893">
          <source_doc>
            <product simpl:ref="9909880"/>
          </source_doc>
          <media>
            <image location="http://images17.newegg.com/is/image/newegg/13-128-532-TS?$S300W$" simpl:id="24712736">
              <clippings_this_is_in>
                <image_clipping simpl:ref="805893"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
      </clippings>
      <image simpl:ref="24712736"/>
      <reviews>
        <product_review mm_name="reviews" title="Awesome board!" description="Pros: Has everything i could possibly need or want. Its a fully decked board with a fair price compared to competitors. Gigabyte always wins in that category imo. Every gigabyte board I&#39;ve owned has had many Bios updates and this one is the same, just updated to Bios F11 and this thing runs like a champion. Battlefield 3 loves this chip runs incredible i love it.  Huge FPS jump in all of my games, huge increase in speed in everything, litterally everything. Also went ahead and threw 2 Vertex 4 SSds in raid 0 and im seeing blistering fast times in everything. All i can say is WOW. Top it off, anytimes you call Gigabyte, their techs are very helpfull and will take the time to make sure your taken care of, very cool and i appreciate that.  And it looks amazing the Heatsink with the gigabyte logo is big, the balck and grey they compliment my balck and grey case with red lighting looks soo sinister i love it. Highly recommened I will always use Gigabyte boards.&#10;				Cons: The price is high for my liking.&#10;				Other Thoughts: X79-UD33930k16GB Dominator GT 2133Silent Pro 1200 psu Corsair 600t Gigabyte GTX 480X-Fi Fatality PlatinumZalman 9900MAXLG Blu ray burner2x256GB Vertex 4s (raid0)Win7-64bit" rating="5 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="Great buy for the money" description="Pros: Board performs great and does everything it is supposed to do. Setup was very easy and came with latest BIOS version. No problems/crashes/BSODs at all and computer is still running great. There is plenty of room between PCIe x16 slots and SATA ports do no get in the way of the graphics cards. Came with all the SATA 3.0 cables I needed as well as crossfire and SLI connections. Driver installation was simple. The board has a nice design and is not overly flashy. Integrated sound card is nice and I love the Dolby Home Theater software.&#10;				Cons: Bundled software is kinda cheap/cheesy looking but easy to use. I like ASUS&#39;s temperature monitoring software better, but there are other programs that can be downloaded for that. There was some bloatware bundled with the software as well.&#10;				Other Thoughts: Great LGA 2011 that does not cost an arm and a leg. After seeing all the negative reviews and high prices of the ASUS boards I figured I would give this a try and I am glad I did. Gigabyte now has a new fan. The board supports 32GB of RAM with four slots, why would you need one with eight slots?" rating="5 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="RMA process is horrible" description="Pros: 4way SLI on an ATX board. Cheap for a 4 way board. 4 way SLI and only requiring 8 slot case. Did i mention 4 way SLI&#10;				Cons: Didn&#39;t last very long.Gigabyte RMA and customer service not very good. There phone lines are so horrible you can&#39;t hear/understand them. says you will get response in 2 working days but that is untrue. Warrant starts from day mobo is made. not day you buy it. that&#39;s a rather shady way to conduced business.&#10;				Other Thoughts: board just started to die component by component. 1st the gigabit port died. then the (and I&#39;ve never heard of this before) the pins for the power switch died. call up rma department and they argue with you that no mobos have a 5 year warranty then they tell you to just fill out rma form online and you will get rma # within two days. it&#39;s been 4 business days and still nothing. I own several gigabyte boards but this might be the last. i&#39;ve always used them when i build pc&#39;s for work, but to get this treatment is enough to make me switch!" rating="2 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="Mid of the road" description="Pros: Its got all the basic needs you could ask for, and an okay price.&#10;				Cons: The RAM does not want to clock to it&#39;s specs and I think this is more the fault of the MB.&#10;				Other Thoughts: In the end I would say that its an okay board. It has no warning lights or displays but what ever." rating="3 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" description="Pros: Solid perfomer. Nice layout and easy to work with the UEFI.O/C Sandy-E 3930 K @ 4.2GHz&#10;				Cons: Cannot power DDR1 Memory slot..Instead of 16GB I&#39;m forced to use 12GB, because DDR1 even if one DIMM was populating the slot won&#39;t work.... I&#39;m using CORSAIR Vengeance 12GB (3 x 4GB) 240-Pin DDR3 SDRAM DDR3 2133 Desktop Memory Model CMZ8GX3M2A2133C11R.&#10;				Other Thoughts: Not sure who to blame.. Is it a faulty MOBO or a BIOS update will fix the issue?!I need an answer.Thanks Newegg." rating="4 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="It Does Work" description="Pros: Solid performance using default base clockExcellent expansion slot configurationPlenty of useful features&#10;				Cons: Processor base clock straps questionableNo POST indication on boardUEFI is kind of clunky, mouse did not work properly without update to newest F10 BIOS and then keyboard does not function for many adjustments&#10;				Other Thoughts: For those thinking about pairing this board with the i7-3820, the BLCK strap on mine will not boot at any setting beyond 1.00" rating="4 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="Great Board for Pro Tools" description="Pros: Booted first time and system runs well, very stable w/3930. PCI/PCIe layout is excellent.&#10;				Cons: Could have more RAM slots.&#10;				Other Thoughts: I recommend this board." rating="5 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="Great board" description="Pros: Great value for socket 2011. 12 SATA USB3. 4 way SLI/Crossfire&#10;				Cons: Bios a little klunky. But OK. Works fine.&#10;				Other Thoughts: you can find my full review online. just google my nick." rating="5 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="Sweet Board, Bad BIOS!" description="Pros: Had my company purchase one of these through Newegg about a month ago along with an i7-3960X for a test rig.  One of the best benefits of the X79/LGA2011 series is that you&#39;ve got more PCI-E lanes to spread around and I really like the fact that this board provides two fully independent 16X PCI-E lanes for maximum SLI performance.&#10;				Cons: BIOS recall and CPU support concerns.  From what I can tell online, this board, and a couple other Gigabyte X79 boards, has/had a BIOS recall issue.  When you look at the Gigabyte CPU support list, pretty much all supported CPUs require at least BIOS rev F7, which apparently corrects a problem in previous BIOS revisions that apparently could result in a fried VRM.  Was really surprised when the board we ordered only a month ago showed up with BIOS revision F3!  Make sure you check your BIOS revision immediately and update as necessary!!!" rating="4 out of 5 eggs"></product_review>
        <product_review mm_name="reviews" title="Fire and BIOS upgrade" description="Pros: Working for several weeks now.&#10;				Cons: There is an issue with VRMs catching fire. Upgrade to BIOS greater or equal to F7 is recommended by Gigabyte. They will not acknowledge hardware fault, only BIOS fault, but the issue is suspicious. The current BIOS is F9.&#10;				Other Thoughts: Has anybody had issues with VRM overheating while overclocking?" rating="4 out of 5 eggs"></product_review>
      </reviews>
    </product>
    <amazon_list mm_name="amazon_list_mania" location="http://www.amazon.com/Cook-Books-amp-more/lm/R1PADW7FZALCHA/">
      <title>Cook Books &amp; more</title>
      <items>
        <amazon_product mm_name="items" location="http://www.amazon.com/Rachael-Ray-365-Repeats-A-Deliciously/dp/1400082544/ref=cm_lmf_tit_1" price="$13.57" overall_rating="3.9 out of 5 stars">
          <title>Rachael Ray 365: No Repeats--A Year of Deliciously Different Dinners (A 30-Minute Meal Cookbook)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Nigella-Express-Recipes-Good-Food/dp/1401322433/ref=cm_lmf_tit_2" price="$21.87" overall_rating="4.5 out of 5 stars">
          <title>Nigella Express: 130 Recipes for Good Food, Fast</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Godstone-Kairos-G-A-Williams/dp/1907211292/ref=cm_lmf_tit_3" price="$9.99">
          <title>Godstone - The Kairos Boxes</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Joy-Cooking-75th-Anniversary-Edition/dp/0743246268/ref=cm_lmf_tit_4" price="$19.55" overall_rating="4.7 out of 5 stars">
          <title>Joy of Cooking: 75th Anniversary Edition - 2006</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Betty-Crocker-Christmas-Cookbook-Editors/dp/0471753033/ref=cm_lmf_tit_5" price="$18.94" overall_rating="4.9 out of 5 stars">
          <title>Betty Crocker Christmas Cookbook</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Nigella-Bites-Elegant-Delectable-Occasion/dp/0786868694/ref=cm_lmf_tit_6" price="$23.97" overall_rating="4.1 out of 5 stars">
          <title>Nigella Bites: From Family Meals to Elegant Dinners -- Easy, Delectable Recipes For Any Occasion</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Christmas-Cooking-Dummies-Dede-Wilson/dp/0764554077/ref=cm_lmf_tit_7" price="$17.15" overall_rating="5.0 out of 5 stars">
          <title>Christmas Cooking For Dummies</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Flavor-Bible-Creativity-Imaginative/dp/0316118400/ref=cm_lmf_tit_8" price="$19.22" overall_rating="4.5 out of 5 stars">
          <title>The Flavor Bible: The Essential Guide to Culinary Creativity, Based on the Wisdom of America&#39;s Most Imaginative Chefs</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Cooking-James-Peterson/dp/1580087892/ref=cm_lmf_tit_9" price="$26.40" overall_rating="4.6 out of 5 stars">
          <title>Cooking</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Healthy-Cooking-Two-Just-You/dp/0875964486/ref=cm_lmf_tit_10" price="$11.43" overall_rating="4.1 out of 5 stars">
          <title>Healthy Cooking for Two (or Just You): Low-Fat Recipes with Half the Fuss and Double the Taste</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Mastering-French-Cooking-50th-Anniversary/dp/0375413405/ref=cm_lmf_tit_11" price="$21.74" overall_rating="4.8 out of 5 stars">
          <title>Mastering the art of French Cooking 50th Anniversary</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Cooking-Light-Essential-Recipe-Collection/dp/0848730682/ref=cm_lmf_tit_12" price="$12.21" overall_rating="3.8 out of 5 stars">
          <title>Cooking Light Cook&#39;s Essential Recipe Collection: Slow Cooker: 57 essential recipes to eat smart, be fit, live well (the Cooking Light.cook&#39;s ESSENTIAL RECIPE COLLECTION)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Home-Cooking-Trisha-Yearwood-Stories/dp/0307465233/ref=cm_lmf_tit_13" price="$16.98" overall_rating="4.6 out of 5 stars">
          <title>Home Cooking with Trisha Yearwood: Stories and Recipes to Share with Family and Friends</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Junior-Cookbook-Better-Gardens-Cooking/dp/0696220008/ref=cm_lmf_tit_14" price="$11.53" overall_rating="4.3 out of 5 stars">
          <title>New Junior Cookbook (Better Homes &amp; Gardens Cooking)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Cooking-Rocks-Rachael-30-Minute-Meals/dp/1891105159/ref=cm_lmf_tit_15" price="$11.53" overall_rating="3.9 out of 5 stars">
          <title>Cooking Rocks! Rachael Ray 30-Minute Meals for Kids</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Everything-Completely-Revised-Anniversary-Edition/dp/0764578650/ref=cm_lmf_tit_16" price="$20.24" overall_rating="4.5 out of 5 stars">
          <title>How to Cook Everything, Completely Revised 10th Anniversary Edition: 2,000 Simple Recipes for Great Food</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Best-Recipe-Cooks-Illustrated-Magazine/dp/0936184744/ref=cm_lmf_tit_17" price="$22.97" overall_rating="4.8 out of 5 stars">
          <title>The New Best Recipe</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Everyday-Italian-Simple-Delicious-Recipes/dp/1400052580/ref=cm_lmf_tit_18" price="$20.00" overall_rating="4.3 out of 5 stars">
          <title>Everyday Italian: 125 Simple and Delicious Recipes</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/The-Everything-Kids-Cookbook-finger-lickin/dp/1598695924/ref=cm_lmf_tit_19" price="$8.95" overall_rating="4.2 out of 5 stars">
          <title>The Everything Kids&#39; Cookbook: From  mac n cheese to double chocolate chip cookies - 90 recipes to have some finger-lickin fun (Everything Kids Series)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Georgia-Cooking-Oklahoma-Kitchen-Recipes/dp/0307381374/ref=cm_lmf_tit_20" price="$16.27" overall_rating="4.7 out of 5 stars">
          <title>Georgia Cooking in an Oklahoma Kitchen: Recipes from My Family to Yours</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Smiths-Complete-Illustrated-Cookery-Course/dp/0563214546/ref=cm_lmf_tit_21" price="$35.66" overall_rating="4.5 out of 5 stars">
          <title>Delia Smith&#39;s Complete Illustrated Cookery Course: A New Edition for the 1990s</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Delia-Smiths-Christmas-130-Recipes/dp/0563370645/ref=cm_lmf_tit_22" price="$24.81" overall_rating="5.0 out of 5 stars">
          <title>Delia Smith&#39;s Christmas: 130 Recipes for Christmas</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.com/Delias-Vegetarian-Collection-Over-Recipes/dp/0563488182/ref=cm_lmf_tit_23" price="$33.55" overall_rating="4.9 out of 5 stars">
          <title>Delia&#39;s Vegetarian Collection: Over 250 Recipes</title>
        </amazon_product>
      </items>
    </amazon_list>
    <amazon_product location="http://www.amazon.com/Twilight-Saga-Breaking-Two-Disc-Special/dp/B002BWP49C" price="$17.96" overall_rating="3.8 out of 5 stars" model="http://ecx.images-amazon.com/images/I/51YPtj%2BNFbL._SL500_AA300_.jpg" reviews_location="http://www.amazon.com/The-Twilight-Saga-Breaking-Two-Disc/product-reviews/B002BWP49C/ref=dp_top_cm_cr_acr_img?ie=UTF8&amp;showViewpoints=1" simpl:id="8985974">
      <title>The Twilight Saga: Breaking Dawn - Part I (Two-Disc Special Edition) (2011)</title>
      <description>The Twilight Saga: Breaking Dawn, Part 1 delivers strongly for the rabid fan base who have catapulted the young adult novel series and subsequent movie adaptations to the worldwide phenomenon that it&#39;s become, but it alienates a broader audience with a lack of any real action. Similar to the tone of Harry Potter and the Deathly Hallows: Part 1, the first film of the two-part Twilight conclusion is heavy on romance, love, and turmoil but light on fight scenes and gruesome battles. The movie doesn&#39;t waste any time getting to the goods and opens with Bella and Edward&#39;s much-hyped wedding scene. It works--the vows are efficient and first-time franchise director Bill Condon (Dreamgirls) moves the party along quickly and amusingly with a well-edited toast scene and some surprisingly moving moments between Bella and her father, cast standout Billy Burke. The honeymoon plays as a slightly awkward soft-focus made-for-TV movie, with a lot of long moments spent staring in the mirror and some love scenes that feel at once overly intimate and completely passionless. It&#39;s a relief when Bella retches on a bite of chicken she&#39;s cooked herself and quickly concludes she&#39;s pregnant with a potentially demonic baby. From bliss to horror, the Cullens return to Forks, where Bella spends the second half of the movie wasting away and Edward and Jacob are aligned in their anger and frustration over her decision. Throw in some over-the-top scenes with Jacob and his pack--including a strange showdown where the wolves communicate in their canine form by having a passionate nonverbal fight in their minds (a plot point that works much better in print, it&#39;s portrayed in the film via aggressive voice-over)--and the film overshoots intensity and goes straight to silly. The birth scene is horrific, but not as gruesome as in the book, and by the end, Bella has of course survived, though is much altered. The final scene features a delightfully campy Michael Sheen as Volturi leader Aro and makes it clear that the action and fun in Breaking Dawn, Part 1 is ready to start. Fans will just have to wait until Part 2 to get it. --Kira Canny</description>
      <clippings>
        <image_clipping simpl:id="31731034">
          <source_doc>
            <amazon_product simpl:ref="8985974"/>
          </source_doc>
          <media>
            <image location="http://ecx.images-amazon.com/images/I/51YPtj%2BNFbL._SL500_AA300_.jpg" simpl:id="18521651">
              <clippings_this_is_in>
                <image_clipping simpl:ref="31731034"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
      </clippings>
      <image simpl:ref="18521651"/>
      <bestseller_list_rank mm_name="amazon_bestseller_list" location="http://www.amazon.com/gp/bestsellers/movies-tv/2958934011/ref=pd_zg_hrsr_mov_1_2_last" overall_rating="#65">
        <title>DVD</title>
      </bestseller_list_rank>
      <people_also_buy>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/The-Twilight-Saga-Eclipse-Two-Disc/dp/B001UV4XFG/ref=pd_cp_mov_0" price="$8.00">
          <title>The Twilight Saga: Eclipse (Two-Disc Special Edition)</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/The-Twilight-Saga-Two-Disc-Special/dp/B001OQCV56/ref=pd_cp_mov_1" price="$6.86">
          <title>The Twilight Saga: New Moon (Two-Disc Special Edition)</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/The-Twilight-Saga-Breaking-Dawn/dp/B006YXTRHY/ref=pd_cp_mov_2" price="$3.99">
          <title>The Twilight Saga: Breaking Dawn - Part 1</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Twilight-Two-Disc-Special-Edition-Kristen/dp/B001P5HRMI/ref=pd_cp_mov_3" price="$6.99">
          <title>Twilight (Two-Disc Special Edition)</title>
        </amazon_product>
      </people_also_buy>
    </amazon_product>
    <amazon_product location="http://www.amazon.com/Samsung-UN60D7000-60-Inch-1080p-Silver/dp/B004QFGGTY" price="$2,699.99" overall_rating="4.2 out of 5 stars" reviews_location="http://www.amazon.com/Samsung-UN60D7000-60-Inch-1080p-Silver/product-reviews/B004QFGGTY/ref=dp_top_cm_cr_acr_img?ie=UTF8&amp;showViewpoints=1" simpl:id="17637168">
      <title>Samsung UN60D7000 60-Inch 1080p 240 Hz 3D LED HDTV, Silver [2011 MODEL]</title>
      <description>3D Technology Checklist This product is 3D-related. To help you get a great 3D experience, use the checklist below to ensure you have everything you need. 3D viewing requires:     A DisplayFirst, you&#39;ll need a 3D-ready display--whether it&#39;s a 3D HDTV, 3D projector, or 3D computer monitor. These displays have more processing power than standard 2D models for displaying 3D images in rapid succession.    A SourceYour display may be ready for 3D playback, but you&#39;ll still need a device to read 3D content. This can be a cable box with a subscription to a 3D channel, a 3D Blu-ray Disc player, or a PlayStation 3 system.    3D Content3D content--the actual entertainment, in other words--will be played back using the source mentioned above, whether it&#39;s a 3D broadcast from your cable provider, a 3D Blu-ray Disc, or a 3D video game.    3D GlassesFor now, the vast majority of 3D HDTVs require glasses for 3D viewing. Many use powered &#34;active shutter&#34; glasses, others polarized &#34;passive&#34; glasses. You&#39;ll need one pair per viewer, and they&#39;ll have to be compatible with your display, whether they&#39;re the same brand, or a pair of &#34;universal&#34; glasses designed to work across brands.    HDMI CableTo connect your source (such as a 3D Blu-ray Disc player) to your display, you&#39;ll need a high-speed HDMI cable. Cables with this designation feature bandwidth speeds up to 10.2 Gbps (gigabits per second), for carrying the 3D signal without any loss of quality.   If you want to get more information about 3D, shop our 3D products, watch videos, or interact with other customers, we invite you to visit 3D 101, our customer center about everything 3D.       Internet-Ready Devices  Internet-ready devices use your broadband connection to deliver dynamic content to your television, whether it&#39;s streaming video from Netflix, new music from Pandora, or a quick glance at today&#39;s weather forecast. Although there is overlap, each manufacturer offers a unique bundle of free or paid services, including streaming video and music, social networking apps, online photo galleries, news and financial updates, weather info, sports scores, and a variety of other smartphone-like applications. Manufacturers continue to add new content to their offerings, keeping customers current through firmware updates, and making a bit of research a prudent step in your buying decision. Learn more about Internet-ready devices and HDTVs, how they work, what services are offered by different manufacturers, and exactly what you&#39;ll need to get started at our Internet TV 101 customer center.  February 2011For the ultimate TV enthusiasts, incredible picture quality and advanced connectivity are just the first step; the Samsung UN60D7000LED TV goes a step beyond, adding elegant design to the formula. The Samsung &#34;One Design&#34; bezel is only 0.2 inches--as slender as they come--for a picture that&#39;s, well, all picture. On that commanding 60-inch screen you can enjoy Samsung&#39; Smart TV, which puts the web, a wide range of apps, Skype video calling, and plenty more at your fingertips. Or connect a Blu-ray 3D player to get immersed in cinema-quality 3D programming--3D glasses not included in box, must be purchased as optional accessory.  With a 240Hz refresh rate, 2 millisecond response time, and improved LED backlight scanning, this HDTV offers true-to-life 2D, 3D and HD images with outstanding clarity.  More Screen, Less Frame Auto Motion Plus 240Hz There&#39;s a big difference between seeing the game and seeing every split second of it. That&#39;s where Auto Motion Plus 240Hz technology comes in. All the action in every frame is analyzed and then adjusted so nothing goes by in a blur. From quarterbacks to cyber warrior, the action is always smooth, sharp and fluid. 1080p Full HD With Four HDMI Inputs The UN60D7000 delivers Full HD 1080p resolution, for a superb level of detail and clarity in your picture. To connect your sources, four HDMI inputs are provided, for delivering a Full HD picture and audio over a single cable. Samsung&#39;s &#34;One Design&#34; The first thing you notice about the LED D7000 series is its barely visible 0.2-inch brushed metal bezel, a fine line that subtly frames the rich content on the screen and enhances the TV&#39;s light form factor. It rests on an improved Quad Stand, with minimalist visual appeal to fit in any viewing environment.   Experience cinematic-quality 3D entertainment in the comfort of your living room or upconvert regular 2D programming to immersive 3D.   Connect with Samsung Smart TV to easily search for movies, TV shows, explore Samsung Apps, chat with friends and more--QWERTY remote control included.   With an incredibly slim 0.2-inch framed border the LED 7000 series lets you get a bigger TV in a smaller space.  3D in HD Enter a new dimension in TV and Home Entertainment with Samsung 3D TV. Experience cinematic-quality 3D entertainment in the comfort of your living room. Samsung 3D is a truly immersive viewing experience, with the power to fill your room with images you can almost touch. Connect to a Blu-ray 3D Player to play 3D titles or intensify your viewing experience by upconverting regular 2D content to immersive 3D. Two pairs of active rechargeable 3D glasses are included to get you started. Samsung&#39;s active glasses are lightweight and comfortable, and will fit right over your prescription glasses. Smart TV with Samsung Apps Connect with Samsung Smart TV for a wealth of added entertainment options. The UN60D7000 features Samsung&#39;s Smart Hub, a simple menu system for connected features. Easily search for movies, shows and videos via online services and across connected devices, browse the web from your television, chat with friends, and access a wide variety of apps from Samsung Apps. Samsung Apps is a growing collection of apps specifically built for your TV, connecting you to your favorite digital content like videos, sports, games, social networking, and much more. With web-connected apps on your Samsung Smart TV, you can stream movies from Netflix or Blockbuster, TV shows from Hulu, videos from YouTube, Next Level sports information from ESPN, music from, Pandora and view updates on your Facebook or Twitter accounts. The apps that matter to you, now available on your TV. Also included with the UN60D7000 is a QWERTY Remote Control for easy typing of search terms, Twitter updates, etc. Skype on Samsung TV Enjoy the convenience and connectivity of free, IP-based, picture-in-picture video calls via Skype, right from your couch. Skype is nice on a 15-inch laptop, but it&#39;s a whole new experience on a display this size. Built-in WiFi Access all your Smart TV features or DLNA network content without the need for a wired connection or add-on device. The UN60D7000 has Wi-Fi connectivity right out of the box. ConnectShare Movie Connect a thumb drive or digital camera quickly and easily via one of the UN60D7000&#39;s USB ports. An intuitive, user-friendly interface allows access to videos, music, or pictures via the remote. AllShare DLNA Networking For even more entertainment options, the UN60D7000 lets you connect to your home network and stream music, videos, and photos from other DLNA Certified devices (your computer, network storage drive, etc.). Ultra Clear Panel Absorbing ambient light, Samsung&#39;s Ultra Clear Panel eliminates reflections, boosts contrast ratio, and creates a comfortable viewing environment. Enjoy crisp image details, natural skin tones, excellent shadow detail, and vibrant colors.  UN60D7000 Select Specifications    Video   Screen Size: 59.6 Inches   Display Type: LED With Micro Dimming Plus   Resolution: 1080p Full HD   Inputs   HDMI: 4 (version 1.4)   Component Video (Y/PB/PR): 1   Composite Video 2 (1 Shared With Componenent)   PC Input: 1   USB 2.0 Ports: 3   Component Audio Input: 1   PC Audio Input: 1   Outputs   Digital Audio Output: 1   Weight and Dimensions   Dimensions (WxHxD): 54.3 x 31.5 x 1.2 Inches (54.3 x 34.9 x 13.8 Inches With Stand)   Weight: 50.5lbs. (57.5 lbs. with stand)    What&#39;s in the Box UN60D7000 60-Inch Class (60 Inches Diagonal) LED HDTV, Stand, Remote Control, Documentation, AV/Component Adapter, AV Adapter       Samsung 2011 LED/LCD Feature Comparison      Series D8000  D7900  D7000  D6500  D6400  D6300  D6000  D5500 D5003 D5010  D5000 D4003 D4000  D630  D550  D450  D403   Screen Sizes  46&#34;, 55&#34;, 60&#34;, 65&#34;   46&#34;, 55&#34;   46&#34;, 55&#34;, 60&#34;   40&#34;, 46&#34;, 55&#34;, 60&#34;   40&#34;, 46&#34;, 55&#34;, 60&#34;   40&#34;, 46&#34;, 55&#34;   32&#34;, 40&#34;, 46&#34;, 55&#34;, 60&#34;   32&#34;, 40&#34;   22&#34;, 40&#34;   22&#34;   22&#34;   19&#34;, 26&#34;, 32&#34;   19&#34;, 32&#34;   40&#34;, 46&#34;   32&#34;, 37&#34;, 40&#34;, 46&#34;   22&#34;, 26&#34;, 32&#34;   32&#34;    Full HD 1080p                                                  240Hz                                                120Hz                                                  3D                                                Samsung Apps                                                Your Video                                                Search All                                                Web Browser                                                Skype                                                HDMI Inputs  4   4   4   4   4   4   4   4  2  2   2  2  4*   4   4   2**  2   USB Ports  3   3   3   3   3   3   3   2  1  1   1  1  1   2   2   1  1   WiFi Built-In                                                Micro Dimming  Micro Dimming Plus   Micro Dimming Plus                                           Allshare                                                Qwerty Remote Included                                                3D Glasses Included                                                Design  One   One   One   One   One   ToC   ToC   ToC  High Glossy Black  ToC   ToC  High Glossy Black  ToC   ToC   ToC   ToC  High Glossy Black   Bezel Type  Ultra Thin   Ultra Thin   Ultra Thin   Ultra Thin   Ultra Thin                                   * 19&#34; has 2 HDMI inputs** 19&#34; and 22&#34; have only 1 HDMI input</description>
      <clippings>
        <image_clipping simpl:id="33058425">
          <source_doc>
            <amazon_product simpl:ref="17637168"/>
          </source_doc>
          <media>
            <image location="http://ecx.images-amazon.com/images/I/31vNmF%2B90sL._AA300_.jpg" simpl:id="13123665">
              <clippings_this_is_in>
                <image_clipping simpl:ref="33058425"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
      </clippings>
      <image simpl:ref="13123665"/>
      <bestseller_list_rank mm_name="bestseller_list_rank"></bestseller_list_rank>
      <people_also_buy>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Samsung-UN40ES6100-40-Inch-1080p-120Hz/dp/B0076M04QU/ref=pd_cp_e_0" price="$797.99">
          <title>Samsung UN40ES6100 40-Inch 1080p 120Hz Slim LED HDTV (Black)</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Mediabridge-Ultra-Series-Certified-Available/dp/B0019EHU8G/ref=pd_cp_e_1" price="$9.99">
          <title>Mediabridge Ultra Series - High Speed HDMI Cable with Ethernet - (6 Feet) - Category 2 Certified - Supports 3D &amp; Audio Return Channel [Latest HDMI Version Available]</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/LG-47LM7600-47-Inch-LED-LCD-Glasses/dp/B006ZH0KVG/ref=pd_cp_e_2">
          <title>LG Cinema Screen 47LM7600 47-Inch Cinema 3D 1080p 240Hz LED-LCD HDTV with Smart TV and Six Pairs of 3D Glasses</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Maxell-Lithium-Batteries-Size-CR2025/dp/B002E0DSBW/ref=pd_cp_e_3" price="$1.82">
          <title>Maxell Lithium 3V Batteries Size CR2025 (Pack of 5)</title>
        </amazon_product>
      </people_also_buy>
    </amazon_product>
    <amazon_product location="http://www.amazon.com/Deathly-Hallows-Movie-Only-Edition-UltraViolet/dp/B005O30Y5Y" price="$12.93" overall_rating="3.2 out of 5 stars" model="http://ecx.images-amazon.com/images/I/51kHnaW--eL._SL500_AA300_.jpg" reviews_location="http://www.amazon.com/Deathly-Hallows-Movie-Only-Edition-UltraViolet/product-reviews/B005O30Y5Y/ref=dp_top_cm_cr_acr_img?ie=UTF8&amp;showViewpoints=1" simpl:id="25321487">
      <title>Harry Potter and the Deathly Hallows, Part 2 (Movie-Only Edition + UltraViolet Digital Copy) [Blu-ray]</title>
      <description>The Deathly Hallows: Part 2 is the film all Harry Potter fans have waited 10 years to see, and the good news is that it&#39;s worth the hype--visually stunning, action packed, faithful to the book, and mature not just in its themes and emotion but in the acting by its cast, some of whom had spent half their lives making Harry Potter movies. Part 2 cuts right to the chase: Voldemort (Ralph Fiennes) has stolen the Elder Wand, one of the three objects required to give someone power over death (a.k.a. the Deathly Hallows), with the intent to hunt and kill Harry. Meanwhile, Harry&#39;s quest to destroy the rest of the Horcruxes (each containing a bit of Voldemort&#39;s soul) leads him first to a thrilling (and hilarious--love that Polyjuice Potion!) trip to Gringotts Bank, then back to Hogwarts, where a spectacular battle pitting the young students and professors (a showcase of the British thesps who have stolen every scene of the series: Maggie Smith&#39;s McGonagall, Jim Broadbent&#39;s Slughorn, David Thewlis&#39;s Lupin) against a dark army of Dementors, ogres, and Bellatrix Lestrange (Helena Bonham Carter, with far less crazy eyes to make this round). As predicted all throughout the saga, Harry also has his final showdown with Voldemort--neither can live while the other survives--though the physics of that predicament might need a set of crib notes to explain. But while each installment has become progressively grimmer, this finale is the most balanced between light and dark (the dark is quite dark--several familiar characters die, with one significant death particularly grisly); the humor is sprinkled in at the most welcome times, thanks to the deft adaptation by Steve Kloves (who scribed all but one of the films from J.K. Rowling&#39;s books) and direction by four-time Potter director David Yates. The climactic kiss between Ron (Rupert Grint) and Hermione (Emma Watson), capping off a decade of romantic tension, is perfectly tuned to their idiosyncratic relationship, and Daniel Radcliffe has, over the last decade, certainly proven he was the right kid for the job all along. As Prof. Snape, the most perfect of casting choices in the best-cast franchise of all time, Alan Rickman breaks your heart. Only the epilogue (and the lack of chemistry between Harry and love Ginny Weasley, barely present here) stand a little shaky, but no matter: the most lucrative franchise in movie history to date has just reached its conclusion, and it&#39;s done so without losing its soul. --Ellen A. Kim</description>
      <clippings>
        <image_clipping simpl:id="16932767">
          <source_doc>
            <amazon_product simpl:ref="25321487"/>
          </source_doc>
          <media>
            <image location="http://ecx.images-amazon.com/images/I/51kHnaW--eL._SL500_AA300_.jpg" simpl:id="32383760">
              <clippings_this_is_in>
                <image_clipping simpl:ref="16932767"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
      </clippings>
      <image simpl:ref="32383760"/>
      <bestseller_list_rank mm_name="amazon_bestseller_list" location="http://www.amazon.com/gp/bestsellers/movies-tv/2959144011/ref=pd_zg_hrsr_mov_1_3_last" overall_rating="#43">
        <title>Fantasy</title>
      </bestseller_list_rank>
      <people_also_buy>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Deathly-Hallows-Blu-ray-UltraViolet-Digital/dp/B001UV4XJ2/ref=pd_cp_mov_0" price="$20.89" overall_rating="3.2 out of 5 stars">
          <title>Harry Potter and the Deathly Hallows, Part 2 (Blu-ray/DVD + UltraViolet Digital Copy)</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Harry-Potter-Deathly-Hallows-Blu-ray/dp/B001UV4XI8/ref=pd_cp_mov_1" price="$19.69">
          <title>Harry Potter and the Deathly Hallows, Part 1 [Blu-ray]</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Harry-Potter-Half-Blood-Prince-Blu-ray/dp/B000ZELISO/ref=pd_cp_mov_2" price="$6.49">
          <title>Harry Potter and the Half-Blood Prince [Blu-ray]</title>
        </amazon_product>
        <amazon_product mm_name="people_also_buy" location="http://www.amazon.com/Harry-Potter-Half-Blood-Prince/dp/B002RVCD6O/ref=pd_cp_mov_3" price="$1.99">
          <title>Harry Potter and the Half-Blood Prince</title>
        </amazon_product>
      </people_also_buy>
    </amazon_product>
    <amazon_list mm_name="amazon_bestseller_list_uk" location="http://www.amazon.co.uk/gp/bestsellers/books/515344">
      <items>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Thunderbirds-Manual-Agents-Technical/dp/0857331175/ref=zg_bs_515344_1/279-7088843-3793735">
          <title>Thunderbirds Manual (Agents&#39; Technical Manual)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Guild-Wars-Ascalon-Matt-Forbeck/dp/1416589473/ref=zg_bs_515344_2/279-7088843-3793735">
          <title>Guild Wars: Ghosts of Ascalon</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Doctor-Who-Official-Annual-2013/dp/1405908440/ref=zg_bs_515344_3/279-7088843-3793735">
          <title>Doctor Who: Official Annual 2013</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Doctor-Who-100-Scariest-Monsters/dp/1405907975/ref=zg_bs_515344_4/279-7088843-3793735">
          <title>Doctor Who: 100 Scariest Monsters</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/The-Brilliant-Book-Doctor-2012/dp/1849902305/ref=zg_bs_515344_5/279-7088843-3793735">
          <title>The Brilliant Book of Doctor Who 2012 HC</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Battle-Royale-Novel-Koushun-Takami/dp/1421527723/ref=zg_bs_515344_6/279-7088843-3793735">
          <title>Battle Royale: The Novel</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/The-Ben-10-Ultimate-Alien/dp/0545225388/ref=zg_bs_515344_7/279-7088843-3793735">
          <title>The Ben 10 Ultimate Alien: The Complete Guide</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Doctor-Who-Encyclopedia-New-Edition/dp/1849902313/ref=zg_bs_515344_8/279-7088843-3793735">
          <title>Doctor Who Encyclopedia (New Edition)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Guild-Wars-Ghosts-Ascalon-ebook/dp/B003YFIYKG/ref=zg_bs_515344_9/279-7088843-3793735">
          <title>Guild Wars: Ghosts of Ascalon</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Finding-Serenity-Anti-heroes-Shepherds-Hookers/dp/1932100431/ref=zg_bs_515344_10/279-7088843-3793735">
          <title>Finding Serenity: Anti-heroes, Lost Shepherds and Space Hookers In Joss Whedon&#39;s Firefly (Smart Pop Series)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Hunger-Official-Illustrated-Companion-Trilogy/dp/0545422906/ref=zg_bs_515344_11/279-7088843-3793735">
          <title>The Hunger Games Official Illustrated Movie Companion (Hunger Games Trilogy)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Arthas-Rise-World-Warcraft-Pocket/dp/143915760X/ref=zg_bs_515344_12/279-7088843-3793735">
          <title>Arthas: Rise of the Lich King (World of Warcraft (Pocket Star))</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Doctor-Who-Borrowed-Naomi-Alderman/dp/184990233X/ref=zg_bs_515344_13/279-7088843-3793735">
          <title>Doctor Who: Borrowed Time</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Doctor-Who-Writers-Final-Chapter/dp/184607861X/ref=zg_bs_515344_14/279-7088843-3793735">
          <title>Doctor Who: The Writer&#39;s Tale: The Final Chapter</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Doctor-Who-Prisoner-Daleks-ebook/dp/B0031RSASI/ref=zg_bs_515344_15/279-7088843-3793735">
          <title>Doctor Who: Prisoner of the Daleks</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/The-Storm-Century-Stephen-King/dp/067103264X/ref=zg_bs_515344_16/279-7088843-3793735">
          <title>The Storm of the Century</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Stargate-SG-1-Alliances-Karen-Miller/dp/1905586000/ref=zg_bs_515344_17/279-7088843-3793735">
          <title>Stargate SG-1: Alliances</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Destiny-Mere-Mortals-Star-Trek/dp/1416551727/ref=zg_bs_515344_18/279-7088843-3793735">
          <title>Destiny: Mere Mortals: Destiny (Star Trek)</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/Doctor-Who-The-Tardis-Handbook/dp/1846079861/ref=zg_bs_515344_19/279-7088843-3793735">
          <title>Doctor Who: The Tardis Handbook</title>
        </amazon_product>
        <amazon_product mm_name="items" location="http://www.amazon.co.uk/The-Saint-Paul-Simper/dp/0233991026/ref=zg_bs_515344_20/279-7088843-3793735">
          <title>The &#34;Saint&#34;</title>
        </amazon_product>
      </items>
    </amazon_list>
    <wikipedia_page location="http://en.wikipedia.org/wiki/Type_system" simpl:id="7063355">
      <title>Type system</title>
      <description>A type system associates a type with each computed value. By examining the flow of these values, a type system attempts to ensure or prove that no type errors can occur. The particular type system in question determines exactly what constitutes a type error, but in general the aim is to prevent operations expecting a certain kind of value being used with values for which that operation does not make sense (logic errors); memory errors will also be prevented. Type systems are often specified as part of programming languages, and built into the interpreters and compilers for them; although they can also be implemented as optional tools.</description>
      <clippings>
        <text_clipping context="Type safety&#10;Inferred vs. Manifest&#10;Dynamic vs. Static&#10;Strong vs. Weak&#10;Nominal vs. Structural&#10;Dependent typing&#10;Duck typing&#10;Latent typing&#10;Linear typing&#10;Uniqueness typing" text="Type safety&#10;Inferred vs. Manifest&#10;Dynamic vs. Static&#10;Strong vs. Weak&#10;Nominal vs. Structural&#10;Dependent typing&#10;Duck typing&#10;Latent typing&#10;Linear typing&#10;Uniqueness typing">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A type system associates a type with each computed value. By examining the flow of these values, a type system attempts to ensure or prove that no type errors can occur. The particular type system in question determines exactly what constitutes a type error, but in general the aim is to prevent operations expecting a certain kind of value being used with values for which that operation does not make sense (logic errors); memory errors will also be prevented. Type systems are often specified as part of programming languages, and built into the interpreters and compilers for them; although they can also be implemented as optional tools." text="A type system associates a type with each computed value. By examining the flow of these values, a type system attempts to ensure or prove that no type errors can occur. The particular type system in question determines exactly what constitutes a type error, but in general the aim is to prevent operations expecting a certain kind of value being used with values for which that operation does not make sense (logic errors); memory errors will also be prevented. Type systems are often specified as part of programming languages, and built into the interpreters and compilers for them; although they can also be implemented as optional tools.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In computer science, a type system may be defined as &#34;a tractable syntactic framework for classifying phrases according to the kinds of values they compute&#34;.[1]" text="In computer science, a type system may be defined as &#34;a tractable syntactic framework for classifying phrases according to the kinds of values they compute&#34;.[1]">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A compiler may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many C compilers the float data type, for example, is represented in 32 bits, in accord with the IEEE specification for single-precision floating point numbers. They will thus use floating-point-specific microprocessor operations on those values (floating-point addition, multiplication, etc.)." text="A compiler may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many C compilers the float data type, for example, is represented in 32 bits, in accord with the IEEE specification for single-precision floating point numbers. They will thus use floating-point-specific microprocessor operations on those values (floating-point addition, multiplication, etc.).">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="The depth of type constraints and the manner of their evaluation affect the typing of the language. A programming language may further associate an operation with varying concrete algorithms on each type in the case of type polymorphism. Type theory is the study of type systems, although the concrete type systems of programming languages originate from practical issues of computer architecture, compiler implementation, and language design." text="The depth of type constraints and the manner of their evaluation affect the typing of the language. A programming language may further associate an operation with varying concrete algorithms on each type in the case of type polymorphism. Type theory is the study of type systems, although the concrete type systems of programming languages originate from practical issues of computer architecture, compiler implementation, and language design.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Assigning data types (typing) gives meaning to sequences of bits. Types usually have associations either with values in memory or with objects such as variables. Because any value simply consists of a sequence of bits in a computer, hardware makes no intrinsic distinction even between memory addresses, instruction code, characters, integers and floating-point numbers, being unable to discriminate between them based on bit pattern alone. Associating a sequence of bits and a type informs programs and programmers how that sequence of bits should be understood." text="Assigning data types (typing) gives meaning to sequences of bits. Types usually have associations either with values in memory or with objects such as variables. Because any value simply consists of a sequence of bits in a computer, hardware makes no intrinsic distinction even between memory addresses, instruction code, characters, integers and floating-point numbers, being unable to discriminate between them based on bit pattern alone. Associating a sequence of bits and a type informs programs and programmers how that sequence of bits should be understood.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Advantages provided by type systems include:" text="Advantages provided by type systems include:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Strong type systems can also have a downside, particularly with regard to forcing the programmer to engage in the unnecessary &#34;bookkeeping&#34; of making unnecessary explicit conversions in contexts where an implicit conversion would cause no harm. Pascal&#39;s type system has been described as &#34;too strong&#34;, because the size of an array or string is part of its type, making some programming tasks very difficult.[2][3] On the contrary, in some languages, such as Haskell, types are automatically inferred, so despite the strong type system, (most) type annotations are unnecessary." text="Strong type systems can also have a downside, particularly with regard to forcing the programmer to engage in the unnecessary &#34;bookkeeping&#34; of making unnecessary explicit conversions in contexts where an implicit conversion would cause no harm. Pascal&#39;s type system has been described as &#34;too strong&#34;, because the size of an array or string is part of its type, making some programming tasks very difficult.[2][3] On the contrary, in some languages, such as Haskell, types are automatically inferred, so despite the strong type system, (most) type annotations are unnecessary.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Type safety contributes to program correctness, but cannot guarantee it unless the type checking itself becomes an undecidable problem. Depending on the specific type system, a program may give the wrong result and be safely typed, producing no compiler errors. For instance, division by zero is not caught by the type checker in most programming languages; instead it is a runtime error. To prove the absence of more general defects, other kinds of formal methods, collectively known as program analyses, are in common use, as well as software testing, a widely used empirical method for finding errors that the type checker cannot detect." text="Type safety contributes to program correctness, but cannot guarantee it unless the type checking itself becomes an undecidable problem. Depending on the specific type system, a program may give the wrong result and be safely typed, producing no compiler errors. For instance, division by zero is not caught by the type checker in most programming languages; instead it is a runtime error. To prove the absence of more general defects, other kinds of formal methods, collectively known as program analyses, are in common use, as well as software testing, a widely used empirical method for finding errors that the type checker cannot detect.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A program typically associates each value with one particular type (although a type may have more than one subtype). Other entities, such as objects, modules, communication channels, dependencies, or even types themselves, can become associated with a type. Some implementations might make the following identifications (though these are technically different concepts):" text="A program typically associates each value with one particular type (although a type may have more than one subtype). Other entities, such as objects, modules, communication channels, dependencies, or even types themselves, can become associated with a type. Some implementations might make the following identifications (though these are technically different concepts):">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A type system, specified for each programming language, controls the ways typed programs may behave, and makes behavior outside these rules illegal. An effect system typically provides more fine-grained control than does a type system." text="A type system, specified for each programming language, controls the ways typed programs may behave, and makes behavior outside these rules illegal. An effect system typically provides more fine-grained control than does a type system.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Formally, type theory studies type systems. More elaborate type systems (such as dependent types) allow for finer-grained program specifications to be verified by a type checker, but this comes at a price, as type inference and other properties generally become undecidable, and type checking itself is dependent on user-supplied proofs. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in type safe manner. As Mark Manasse concisely put it:[4]" text="Formally, type theory studies type systems. More elaborate type systems (such as dependent types) allow for finer-grained program specifications to be verified by a type checker, but this comes at a price, as type inference and other properties generally become undecidable, and type checking itself is dependent on user-supplied proofs. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in type safe manner. As Mark Manasse concisely put it:[4]">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="The process of verifying and enforcing the constraints of types &#8211; type checking &#8211; may occur either at compile-time (a static check) or run-time (a dynamic check). If a language specification requires its typing rules strongly (i.e., more or less allowing only those automatic type conversions that do not lose information), one can refer to the process as strongly typed, if not, as weakly typed. The terms are not usually used in a strict sense." text="The process of verifying and enforcing the constraints of types &#8211; type checking &#8211; may occur either at compile-time (a static check) or run-time (a dynamic check). If a language specification requires its typing rules strongly (i.e., more or less allowing only those automatic type conversions that do not lose information), one can refer to the process as strongly typed, if not, as weakly typed. The terms are not usually used in a strict sense.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time. Statically typed languages include ActionScript 3, Ada, C, D, Eiffel, F#, Fortran, Go, Haskell, haXe, JADE, Java, ML, Objective-C, OCaml, Pascal, Seed7 and Scala. C++ is statically typed, aside from its run-time type information system. The C# type system performs static-like compile-time type checking, but also includes full runtime type checking. Perl is statically typed with respect to distinguishing arrays, hashes, scalars, and subroutines." text="A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time. Statically typed languages include ActionScript 3, Ada, C, D, Eiffel, F#, Fortran, Go, Haskell, haXe, JADE, Java, ML, Objective-C, OCaml, Pascal, Seed7 and Scala. C++ is statically typed, aside from its run-time type information system. The C# type system performs static-like compile-time type checking, but also includes full runtime type checking. Perl is statically typed with respect to distinguishing arrays, hashes, scalars, and subroutines.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Static typing is a limited form of program verification (see type safety): accordingly, it allows many type errors to be caught early in the development cycle. Static type checkers evaluate only the type information that can be determined at compile time, but are able to verify that the checked conditions hold for all possible executions of the program, which eliminates the need to repeat type checks every time the program is executed. Program execution may also be made more efficient (e.g. faster or taking reduced memory) by omitting runtime type checks and enabling other optimizations." text="Static typing is a limited form of program verification (see type safety): accordingly, it allows many type errors to be caught early in the development cycle. Static type checkers evaluate only the type information that can be determined at compile time, but are able to verify that the checked conditions hold for all possible executions of the program, which eliminates the need to repeat type checks every time the program is executed. Program execution may also be made more efficient (e.g. faster or taking reduced memory) by omitting runtime type checks and enabling other optimizations.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Because they evaluate type information during compilation and therefore lack type information that is only available at run-time, static type checkers are conservative. They will reject some programs that may be well-behaved at run-time, but that cannot be statically determined to be well-typed. For example, even if an expression &lt;complex test&gt; always evaluates to true at run-time, a program containing the code." text="Because they evaluate type information during compilation and therefore lack type information that is only available at run-time, static type checkers are conservative. They will reject some programs that may be well-behaved at run-time, but that cannot be statically determined to be well-typed. For example, even if an expression &lt;complex test&gt; always evaluates to true at run-time, a program containing the code.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="will be rejected as ill-typed, because a static analysis cannot determine that the else branch won&#39;t be taken.[1] The conservative behaviour of static type checkers is advantageous when &lt;complex test&gt; evaluates to false infrequently: A static type checker can detect type errors in rarely used code paths. Without static type checking, even code coverage tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account." text="will be rejected as ill-typed, because a static analysis cannot determine that the else branch won&#39;t be taken.[1] The conservative behaviour of static type checkers is advantageous when &lt;complex test&gt; evaluates to false infrequently: A static type checker can detect type errors in rarely used code paths. Without static type checking, even code coverage tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="The most widely used statically typed languages are not formally type safe. They have &#34;loopholes&#34; in the programming language specification enabling programmers to write code that circumvents the verification performed by a static type checker and so address a wider range of problems. For example, most C-style languages have type punning, and Haskell has such features as unsafePerformIO: such operations may be unsafe at runtime, in that they can cause unwanted behaviour due to incorrect typing of values when the program runs." text="The most widely used statically typed languages are not formally type safe. They have &#34;loopholes&#34; in the programming language specification enabling programmers to write code that circumvents the verification performed by a static type checker and so address a wider range of problems. For example, most C-style languages have type punning, and Haskell has such features as unsafePerformIO: such operations may be unsafe at runtime, in that they can cause unwanted behaviour due to incorrect typing of values when the program runs.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A programming language is said to be dynamically typed when the majority of its type checking is performed at run-time as opposed to at compile-time. In dynamic typing values have types, but variables do not; that is, a variable can refer to a value of any type. Dynamically typed languages include APL, Erlang, Groovy, JavaScript, Lisp, Lua, MATLAB, GNU Octave, Perl (for user-defined types, but not built-in types), PHP, Pick BASIC, Prolog, Python, Ruby, Smalltalk and Tcl." text="A programming language is said to be dynamically typed when the majority of its type checking is performed at run-time as opposed to at compile-time. In dynamic typing values have types, but variables do not; that is, a variable can refer to a value of any type. Dynamically typed languages include APL, Erlang, Groovy, JavaScript, Lisp, Lua, MATLAB, GNU Octave, Perl (for user-defined types, but not built-in types), PHP, Pick BASIC, Prolog, Python, Ruby, Smalltalk and Tcl.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Implementations of dynamically typed languages generally associate run-time objects with &#34;tags&#34; containing their type information. This run-time classification is then used to implement type checks and dispatch overloaded functions, but can also enable pervasive uses of dynamic dispatch, late binding and similar idioms that would be cumbersome at best in a statically typed language, requiring the use of variant types or similar features." text="Implementations of dynamically typed languages generally associate run-time objects with &#34;tags&#34; containing their type information. This run-time classification is then used to implement type checks and dispatch overloaded functions, but can also enable pervasive uses of dynamic dispatch, late binding and similar idioms that would be cumbersome at best in a statically typed language, requiring the use of variant types or similar features.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="More broadly, as explained below, dynamic typing can improve support for dynamic programming language features, such as generating types and functionality based on run-time data. (Nevertheless, dynamically typed languages need not support any or all such features, and some dynamic programming languages are statically typed.) On the other hand, dynamic typing provides fewer a priori guarantees: a dynamically typed language accepts and attempts to execute some programs that would be ruled as invalid by a static type checker, either due to errors in the program or due to static type checking being too conservative." text="More broadly, as explained below, dynamic typing can improve support for dynamic programming language features, such as generating types and functionality based on run-time data. (Nevertheless, dynamically typed languages need not support any or all such features, and some dynamic programming languages are statically typed.) On the other hand, dynamic typing provides fewer a priori guarantees: a dynamically typed language accepts and attempts to execute some programs that would be ruled as invalid by a static type checker, either due to errors in the program or due to static type checking being too conservative.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Dynamic typing may result in runtime type errors&#8212;that is, at runtime, a value may have an unexpected type, and an operation nonsensical for that type is applied. Such errors may occur long after the place where the programming mistake was made&#8212;that is, the place where the wrong type of data passed into a place it should not have. This may make the bug difficult to locate." text="Dynamic typing may result in runtime type errors&#8212;that is, at runtime, a value may have an unexpected type, and an operation nonsensical for that type is applied. Such errors may occur long after the place where the programming mistake was made&#8212;that is, the place where the wrong type of data passed into a place it should not have. This may make the bug difficult to locate.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Dynamically typed language systems&#39; run-time checks can potentially be more sophisticated than those of statically typed languages, as they can use dynamic information as well as any information from the source code. On the other hand, runtime checks only assert that conditions hold in a particular execution of the program, and the checks are repeated for every execution of the program." text="Dynamically typed language systems&#39; run-time checks can potentially be more sophisticated than those of statically typed languages, as they can use dynamic information as well as any information from the source code. On the other hand, runtime checks only assert that conditions hold in a particular execution of the program, and the checks are repeated for every execution of the program.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Development in dynamically typed languages is often supported by programming practices such as unit testing. Testing is a key practice in professional software development, and is particularly important in dynamically typed languages. In practice, the testing done to ensure correct program operation can detect a much wider range of errors than static type-checking, but full test coverage over all possible executions of a program (including timing, user inputs, etc.), if even possible, would be extremely costly and impractical. Static typing helps by providing strong guarantees of a particular subset of commonly made errors never occurring" text="Development in dynamically typed languages is often supported by programming practices such as unit testing. Testing is a key practice in professional software development, and is particularly important in dynamically typed languages. In practice, the testing done to ensure correct program operation can detect a much wider range of errors than static type-checking, but full test coverage over all possible executions of a program (including timing, user inputs, etc.), if even possible, would be extremely costly and impractical. Static typing helps by providing strong guarantees of a particular subset of commonly made errors never occurring">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="The presence of static typing in a programming language does not necessarily imply the absence of all dynamic typing mechanisms. For example, Java and some other ostensibly statically typed languages, support downcasting and other type operations that depend on runtime type checks, a form of dynamic typing. More generally, most programming languages include mechanisms for dispatching over different &#39;kinds&#39; of data, such as disjoint unions, polymorphic objects, and variant types: Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See programming language for more discussion of the interactions between static and dynamic typing." text="The presence of static typing in a programming language does not necessarily imply the absence of all dynamic typing mechanisms. For example, Java and some other ostensibly statically typed languages, support downcasting and other type operations that depend on runtime type checks, a form of dynamic typing. More generally, most programming languages include mechanisms for dispatching over different &#39;kinds&#39; of data, such as disjoint unions, polymorphic objects, and variant types: Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See programming language for more discussion of the interactions between static and dynamic typing.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Certain languages, for example Clojure, Common Lisp, or Cython, are dynamically typed by default, but allow this behaviour to be overridden through the use of explicit type hints that result in static typing. One reason to use such hints would be to achieve the performance benefits of static typing in performance-sensitive parts of code." text="Certain languages, for example Clojure, Common Lisp, or Cython, are dynamically typed by default, but allow this behaviour to be overridden through the use of explicit type hints that result in static typing. One reason to use such hints would be to achieve the performance benefits of static typing in performance-sensitive parts of code.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="As of the 4.0 Release, the .NET Framework supports a variant of dynamic typing via the System.Dynamic namespace whereby a static object of type &#39;dynamic&#39; is a placeholder for the .NET runtime to interrogate its dynamic facilities to resolve the object reference." text="As of the 4.0 Release, the .NET Framework supports a variant of dynamic typing via the System.Dynamic namespace whereby a static object of type &#39;dynamic&#39; is a placeholder for the .NET runtime to interrogate its dynamic facilities to resolve the object reference.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="The choice between static and dynamic typing requires trade-offs." text="The choice between static and dynamic typing requires trade-offs.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Static typing can find type errors reliably at compile time. This should increase the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, and thus disagree over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code. Static typing advocates believe programs are more reliable when they have been well type-checked, while dynamic typing advocates point to distributed code that has proven reliable and to small bug databases. The value of static typing, then, presumably increases as the strength of the type system is increased. Advocates of dependently typed languages such as Dependent ML and Epigram have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.[5]" text="Static typing can find type errors reliably at compile time. This should increase the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, and thus disagree over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code. Static typing advocates believe programs are more reliable when they have been well type-checked, while dynamic typing advocates point to distributed code that has proven reliable and to small bug databases. The value of static typing, then, presumably increases as the strength of the type system is increased. Advocates of dependently typed languages such as Dependent ML and Epigram have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.[5]">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Static typing usually results in compiled code that executes more quickly. When the compiler knows the exact data types that are in use, it can produce optimized machine code. Further, compilers for statically typed languages can find assembler shortcuts more easily. Some dynamically typed languages such as Common Lisp allow optional type declarations for optimization for this very reason. Static typing makes this pervasive. See optimization." text="Static typing usually results in compiled code that executes more quickly. When the compiler knows the exact data types that are in use, it can produce optimized machine code. Further, compilers for statically typed languages can find assembler shortcuts more easily. Some dynamically typed languages such as Common Lisp allow optional type declarations for optimization for this very reason. Static typing makes this pervasive. See optimization.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="By contrast, dynamic typing may allow compilers to run more quickly and allow interpreters to dynamically load new code, since changes to source code in dynamically typed languages may result in less checking to perform and less code to revisit. This too may reduce the edit-compile-test-debug cycle." text="By contrast, dynamic typing may allow compilers to run more quickly and allow interpreters to dynamically load new code, since changes to source code in dynamically typed languages may result in less checking to perform and less code to revisit. This too may reduce the edit-compile-test-debug cycle.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Statically typed languages that lack type inference (such as C and Java) require that programmers declare the types they intend a method or function to use. This can serve as additional documentation for the program, which the compiler will not permit the programmer to ignore or permit to drift out of synchronization. However, a language can be statically typed without requiring type declarations (examples include Haskell, Scala, OCaml and to a lesser extent C#), so explicit type declaration is not a necessary requirement for static typing in all languages." text="Statically typed languages that lack type inference (such as C and Java) require that programmers declare the types they intend a method or function to use. This can serve as additional documentation for the program, which the compiler will not permit the programmer to ignore or permit to drift out of synchronization. However, a language can be statically typed without requiring type declarations (examples include Haskell, Scala, OCaml and to a lesser extent C#), so explicit type declaration is not a necessary requirement for static typing in all languages.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Dynamic typing allows constructs that some static type checking would reject as illegal. For example, eval functions, which execute arbitrary data as code, become possible. An eval function is possible with static typing, but requires advanced uses of algebraic data types. Furthermore, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure (mock object) to be transparently used in place of a full-fledged data structure (usually for the purposes of experimentation and testing)." text="Dynamic typing allows constructs that some static type checking would reject as illegal. For example, eval functions, which execute arbitrary data as code, become possible. An eval function is possible with static typing, but requires advanced uses of algebraic data types. Furthermore, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure (mock object) to be transparently used in place of a full-fledged data structure (usually for the purposes of experimentation and testing).">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Dynamic typing typically allows duck typing (which enables easier code reuse). Many languages with static typing also feature duck typing or other mechanisms like generic programming which also enables easier code reuse." text="Dynamic typing typically allows duck typing (which enables easier code reuse). Many languages with static typing also feature duck typing or other mechanisms like generic programming which also enables easier code reuse.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Dynamic typing typically makes metaprogramming easier to use. For example, C++ templates are typically more cumbersome to write than the equivalent Ruby or Python code. More advanced run-time constructs such as metaclasses and introspection are often more difficult to use in statically typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by dynamic programming languages; many of these are dynamically typed, although dynamic typing need not be related to dynamic programming languages." text="Dynamic typing typically makes metaprogramming easier to use. For example, C++ templates are typically more cumbersome to write than the equivalent Ruby or Python code. More advanced run-time constructs such as metaclasses and introspection are often more difficult to use in statically typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by dynamic programming languages; many of these are dynamically typed, although dynamic typing need not be related to dynamic programming languages.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In 1974 Liskov and Zilles described a strong-typed language as one in which &#34;whenever an object is passed from a calling function to a called function, its type must be compatible with the type declared in the called function.&#34;[6] Jackson wrote, &#34;In a strongly typed language each data area will have a distinct type and each process will state its communication requirements in terms of these types.&#34;[7]" text="In 1974 Liskov and Zilles described a strong-typed language as one in which &#34;whenever an object is passed from a calling function to a called function, its type must be compatible with the type declared in the called function.&#34;[6] Jackson wrote, &#34;In a strongly typed language each data area will have a distinct type and each process will state its communication requirements in terms of these types.&#34;[7]">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A type system is said to feature strong typing when it specifies one or more restrictions on how operations involving values of different data types can be intermixed. A computer language that implements strong typing will prevent the successful execution of an operation on arguments that have the wrong type." text="A type system is said to feature strong typing when it specifies one or more restrictions on how operations involving values of different data types can be intermixed. A computer language that implements strong typing will prevent the successful execution of an operation on arguments that have the wrong type.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Weak typing means that a language implicitly converts (or casts) types when used. Consider the following example:" text="Weak typing means that a language implicitly converts (or casts) types when used. Consider the following example:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In a weakly typed language, the result of this operation depends on language-specific rules. Visual Basic would convert the string &#34;37&#34; into the number 37, perform addition, and produce the number 42. JavaScript would convert the number 5 to the string &#34;5&#34;, perform string concatenation, and produce the string &#34;537.&#34; In JavaScript, the conversion to string is applied regardless of the order of the operands (for example, y + x would be &#34;375&#34;) while in AppleScript, the left-most operand determines the type of the result, so that x + y is the number 42 but y + x is the string &#34;375&#34;." text="In a weakly typed language, the result of this operation depends on language-specific rules. Visual Basic would convert the string &#34;37&#34; into the number 37, perform addition, and produce the number 42. JavaScript would convert the number 5 to the string &#34;5&#34;, perform string concatenation, and produce the string &#34;537.&#34; In JavaScript, the conversion to string is applied regardless of the order of the operands (for example, y + x would be &#34;375&#34;) while in AppleScript, the left-most operand determines the type of the result, so that x + y is the number 42 but y + x is the string &#34;375&#34;.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In the same manner, due to JavaScript&#39;s dynamic type conversions:" text="In the same manner, due to JavaScript&#39;s dynamic type conversions:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A C cast gone wrong exemplifies the problems that can occur if strong typing is absent: if a programmer casts a value from one type to another in C, not only must the compiler allow the code at compile time, but the runtime must allow it as well. This may permit more compact and faster C code, but it can make debugging more difficult." text="A C cast gone wrong exemplifies the problems that can occur if strong typing is absent: if a programmer casts a value from one type to another in C, not only must the compiler allow the code at compile time, but the runtime must allow it as well. This may permit more compact and faster C code, but it can make debugging more difficult.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A third way of categorizing the type system of a programming language uses the safety of typed operations and conversions. Computer scientists consider a language &#34;type-safe&#34;, if it does not allow operations or conversions that lead to erroneous conditions." text="A third way of categorizing the type system of a programming language uses the safety of typed operations and conversions. Computer scientists consider a language &#34;type-safe&#34;, if it does not allow operations or conversions that lead to erroneous conditions.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Some observers use the term memory-safe language (or just safe language) to describe languages that do not allow undefined operations to occur. For example, a memory-safe language will check array bounds, or else statically guarantee (i.e., at compile time before execution) that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors." text="Some observers use the term memory-safe language (or just safe language) to describe languages that do not allow undefined operations to occur. For example, a memory-safe language will check array bounds, or else statically guarantee (i.e., at compile time before execution) that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In languages like Visual Basic, variable z in the example acquires the value 42. While the programmer may or may not have intended this, the language defines the result specifically, and the program does not crash or assign an ill-defined value to z. In this respect, such languages are type-safe; however, in some languages, if the value of y was a string that could not be converted to a number (e.g. &#34;Hello World&#34;), the results would be undefined. Such languages are type-safe (in that they will not crash), but can easily produce undesirable results. In other languages like JavaScript, the numeric operand would be converted to a string, and then concatenation performed. In this case, the results are not undefined and are predictable." text="In languages like Visual Basic, variable z in the example acquires the value 42. While the programmer may or may not have intended this, the language defines the result specifically, and the program does not crash or assign an ill-defined value to z. In this respect, such languages are type-safe; however, in some languages, if the value of y was a string that could not be converted to a number (e.g. &#34;Hello World&#34;), the results would be undefined. Such languages are type-safe (in that they will not crash), but can easily produce undesirable results. In other languages like JavaScript, the numeric operand would be converted to a string, and then concatenation performed. In this case, the results are not undefined and are predictable.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Now let us look at the same example in C:" text="Now let us look at the same example in C:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In this example z will point to a memory address five characters beyond y, equivalent to three characters after the terminating zero character of the string pointed to by y. The content of that location is undefined, and might lie outside addressable memory. The mere computation of such a pointer may result in undefined behavior (including the program crashing) according to C standards, and in typical systems dereferencing z at this point could cause the program to crash. We have a well-typed, but not memory-safe program&#8212;a condition that cannot occur in a type-safe language." text="In this example z will point to a memory address five characters beyond y, equivalent to three characters after the terminating zero character of the string pointed to by y. The content of that location is undefined, and might lie outside addressable memory. The mere computation of such a pointer may result in undefined behavior (including the program crashing) according to C standards, and in typical systems dereferencing z at this point could cause the program to crash. We have a well-typed, but not memory-safe program&#8212;a condition that cannot occur in a type-safe language.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In some languages, like JavaScript, the use of special numeric values and constants allows type-safety for mathematical operations without resulting in runtime errors. For example, when dividing a Number by a String, or a Number by zero." text="In some languages, like JavaScript, the use of special numeric values and constants allows type-safety for mathematical operations without resulting in runtime errors. For example, when dividing a Number by a String, or a Number by zero.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Some languages allow different levels of checking to apply to different regions of code. Examples include:-" text="Some languages allow different levels of checking to apply to different regions of code. Examples include:-">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Additional tools such as lint and IBM Rational Purify can also be used to achieve a higher level of strictness." text="Additional tools such as lint and IBM Rational Purify can also be used to achieve a higher level of strictness.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="It has been proposed, chiefly by Gilad Bracha, that the choice of type system be made independent of choice of language; that a type system should be a module that can be &#34;plugged&#34; into a language as required. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.[8] The requirement that types do not affect the semantics of the language is difficult to fulfil: for instance, class based inheritance becomes impossible." text="It has been proposed, chiefly by Gilad Bracha, that the choice of type system be made independent of choice of language; that a type system should be a module that can be &#34;plugged&#34; into a language as required. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.[8] The requirement that types do not affect the semantics of the language is difficult to fulfil: for instance, class based inheritance becomes impossible.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="The term &#34;polymorphism&#34; refers to the ability of code (in particular, methods or classes) to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an associative array once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism generic programming. The type-theoretic foundations of polymorphism are closely related to those of abstraction, modularity and (in some cases) subtyping." text="The term &#34;polymorphism&#34; refers to the ability of code (in particular, methods or classes) to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an associative array once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism generic programming. The type-theoretic foundations of polymorphism are closely related to those of abstraction, modularity and (in some cases) subtyping.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In &#34;duck typing&#34;,[9] a statement calling a method m on an object does not rely on the declared type of the object; only that the object, of whatever type, must supply an implementation of the method called, when called, at run-time." text="In &#34;duck typing&#34;,[9] a statement calling a method m on an object does not rely on the declared type of the object; only that the object, of whatever type, must supply an implementation of the method called, when called, at run-time.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Duck typing differs from structural typing in that, if the part (of the whole module structure) needed for a given local computation is present at runtime, the duck type system is satisfied in its type identity analysis. On the other hand, a structural type system would require the analysis of the whole module structure at compile time to determine type identity or type dependence." text="Duck typing differs from structural typing in that, if the part (of the whole module structure) needed for a given local computation is present at runtime, the duck type system is satisfied in its type identity analysis. On the other hand, a structural type system would require the analysis of the whole module structure at compile time to determine type identity or type dependence.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Duck typing differs from a nominative type system in a number of aspects. The most prominent ones are that for duck typing, type information is determined at runtime (as contrasted to compile time), and the name of the type is irrelevant to determine type identity or type dependence; only partial structure information is required for that for a given point in the program execution." text="Duck typing differs from a nominative type system in a number of aspects. The most prominent ones are that for duck typing, type information is determined at runtime (as contrasted to compile time), and the name of the type is irrelevant to determine type identity or type dependence; only partial structure information is required for that for a given point in the program execution.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Duck typing uses the premise that (referring to a value) &#34;if it walks like a duck, and quacks like a duck, then it is a duck&#34; (this is a reference to the duck test that is attributed to James Whitcomb Riley). The term may have been coined[citation needed] by Alex Martelli in a 2000 message[10] to the comp.lang.python newsgroup (see Python)." text="Duck typing uses the premise that (referring to a value) &#34;if it walks like a duck, and quacks like a duck, then it is a duck&#34; (this is a reference to the duck test that is attributed to James Whitcomb Riley). The term may have been coined[citation needed] by Alex Martelli in a 2000 message[10] to the comp.lang.python newsgroup (see Python).">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band static program analysis. Frequently, these are based on ideas from formal type theory and are only available as part of prototype research systems." text="Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band static program analysis. Frequently, these are based on ideas from formal type theory and are only available as part of prototype research systems.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Dependent types are based on the idea of using scalars or values to more precisely describe the type of some other value. For example,  might be the type of a 3&#215;3 matrix. We can then define typing rules such as the following rule for matrix multiplication:" text="Dependent types are based on the idea of using scalars or values to more precisely describe the type of some other value. For example,  might be the type of a 3&#215;3 matrix. We can then define typing rules such as the following rule for matrix multiplication:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="where , ,  are arbitrary positive integer values. A variant of ML called Dependent ML has been created based on this type system, but because type checking for conventional dependent types is undecidable, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to Presburger arithmetic. Other languages such as Epigram make the value of all expressions in the language decidable so that type checking can be decidable. It is also possible to make the language[vague] Turing-complete at the price of undecidable type checking, as in Cayenne." text="where , ,  are arbitrary positive integer values. A variant of ML called Dependent ML has been created based on this type system, but because type checking for conventional dependent types is undecidable, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to Presburger arithmetic. Other languages such as Epigram make the value of all expressions in the language decidable so that type checking can be decidable. It is also possible to make the language[vague] Turing-complete at the price of undecidable type checking, as in Cayenne.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Linear types, based on the theory of linear logic, and closely related to uniqueness types, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large immutable values such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object (such as &#39;str = str + &#34;a&#34;&#39;) can be optimized &#34;under the hood&#34; into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating referential transparency. They are also used in the prototype operating system Singularity for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The Clean language (a Haskell-like language) uses this type system in order to gain a lot of speed[not specific enough to verify] while remaining safe." text="Linear types, based on the theory of linear logic, and closely related to uniqueness types, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large immutable values such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object (such as &#39;str = str + &#34;a&#34;&#39;) can be optimized &#34;under the hood&#34; into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating referential transparency. They are also used in the prototype operating system Singularity for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The Clean language (a Haskell-like language) uses this type system in order to gain a lot of speed[not specific enough to verify] while remaining safe.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Intersection types are types describing values that belong to both of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting either signed or unsigned chars, because it is compatible with both types." text="Intersection types are types describing values that belong to both of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting either signed or unsigned chars, because it is compatible with both types.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Intersection types are useful for describing overloaded function types: For example, if &#34;int &#8594; int&#34; is the type of functions taking an integer argument and returning an integer, and &#34;float &#8594; float&#34; is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an &#34;int &#8594; int&#34; function safely; it simply would not use the &#34;float &#8594; float&#34; functionality." text="Intersection types are useful for describing overloaded function types: For example, if &#34;int &#8594; int&#34; is the type of functions taking an integer argument and returning an integer, and &#34;float &#8594; float&#34; is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an &#34;int &#8594; int&#34; function safely; it simply would not use the &#34;float &#8594; float&#34; functionality.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In a subclassing hierarchy, the intersection of a type and an ancestor type (such as its parent) is the most derived type. The intersection of sibling types is empty." text="In a subclassing hierarchy, the intersection of a type and an ancestor type (such as its parent) is the most derived type. The intersection of sibling types is empty.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="The Forsythe language includes a general implementation of intersection types. A restricted form is refinement types." text="The Forsythe language includes a general implementation of intersection types. A restricted form is refinement types.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Union types are types describing values that belong to either of two types. For example, in C, the signed char has range -128 to 127, and the unsigned char has range 0 to 255, so the union of these two types would have range -128 to 255. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on both types being unioned. C&#39;s &#34;union&#34; concept is similar to union types, but is not typesafe, as it permits operations that are valid on either type, rather than both. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature (e.g., value or type) is not known." text="Union types are types describing values that belong to either of two types. For example, in C, the signed char has range -128 to 127, and the unsigned char has range 0 to 255, so the union of these two types would have range -128 to 255. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on both types being unioned. C&#39;s &#34;union&#34; concept is similar to union types, but is not typesafe, as it permits operations that are valid on either type, rather than both. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature (e.g., value or type) is not known.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In a subclassing hierarchy, the union of a type and an ancestor type (such as its parent) is the ancestor type. The union of sibling types is a subtype of their common ancestor (that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common)." text="In a subclassing hierarchy, the union of a type and an ancestor type (such as its parent) is the ancestor type. The union of sibling types is a subtype of their common ancestor (that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common).">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Existential types are frequently used in connection with record types to represent modules and abstract data types, due to their ability to separate implementation from interface. For example, the type &#34;T = &#8707;X { a: X; f: (X &#8594; int); }&#34; describes a module interface that has a data member of type X and a function that takes a parameter of the same type X and returns an integer. This could be implemented in different ways; for example:" text="Existential types are frequently used in connection with record types to represent modules and abstract data types, due to their ability to separate implementation from interface. For example, the type &#34;T = &#8707;X { a: X; f: (X &#8594; int); }&#34; describes a module interface that has a data member of type X and a function that takes a parameter of the same type X and returns an integer. This could be implemented in different ways; for example:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value &#34;t&#34; of type &#34;T&#34;, we know that &#34;t.f(t.a)&#34; is well-typed, regardless of what the abstract type X is. This gives flexibility for choosing types suited to a particular implementation while clients that use only values of the interface type&#8212;the existential type&#8212;are isolated from these choices." text="These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value &#34;t&#34; of type &#34;T&#34;, we know that &#34;t.f(t.a)&#34; is well-typed, regardless of what the abstract type X is. This gives flexibility for choosing types suited to a particular implementation while clients that use only values of the interface type&#8212;the existential type&#8212;are isolated from these choices.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In general it&#39;s impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT { a: int; f: (int &#8594; int); } could also have the type &#8707;X { a: X; f: (int &#8594; int); }. The simplest solution is to annotate every module with its intended type, e.g.:" text="In general it&#39;s impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT { a: int; f: (int &#8594; int); } could also have the type &#8707;X { a: X; f: (int &#8594; int); }. The simplest solution is to annotate every module with its intended type, e.g.:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn&#39;t until 1988 that John C. Mitchell and Gordon Plotkin established the formal theory under the slogan: &#34;Abstract [data] types have existential type&#34;.[11] The theory is a second-order typed lambda calculus similar to System F, but with existential instead of universal quantification." text="Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn&#39;t until 1988 that John C. Mitchell and Gordon Plotkin established the formal theory under the slogan: &#34;Abstract [data] types have existential type&#34;.[11] The theory is a second-order typed lambda calculus similar to System F, but with existential instead of universal quantification.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Many static type systems, such as those of C and Java, require type declarations: The programmer must explicitly associate each variable with a particular type. Others, such as Haskell&#39;s, perform type inference: The compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function f(x, y) that adds x and y together, the compiler can infer that x and y must be numbers &#8211; since addition is only defined for numbers. Therefore, any call to f elsewhere in the program that specifies a non-numeric type (such as a string or list) as an argument would signal an error." text="Many static type systems, such as those of C and Java, require type declarations: The programmer must explicitly associate each variable with a particular type. Others, such as Haskell&#39;s, perform type inference: The compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function f(x, y) that adds x and y together, the compiler can infer that x and y must be numbers &#8211; since addition is only defined for numbers. Therefore, any call to f elsewhere in the program that specifies a non-numeric type (such as a string or list) as an argument would signal an error.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression 3.14 might imply a type of floating-point, while [1, 2, 3] might imply a list of integers &#8211; typically an array." text="Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression 3.14 might imply a type of floating-point, while [1, 2, 3] might imply a list of integers &#8211; typically an array.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Type inference is in general possible, if it is decidable in the type theory in question. Moreover, even if inference is undecidable in general for a given type theory, inference is often possible for a large subset of real-world programs. Haskell&#39;s type system, a version of Hindley-Milner, is a restriction of System F&#969; to so-called rank-1 polymorphic types, in which type inference is decidable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference undecidable. (Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.)" text="Type inference is in general possible, if it is decidable in the type theory in question. Moreover, even if inference is undecidable in general for a given type theory, inference is often possible for a large subset of real-world programs. Haskell&#39;s type system, a version of Hindley-Milner, is a restriction of System F&#969; to so-called rank-1 polymorphic types, in which type inference is decidable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference undecidable. (Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.)">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A type of types is a kind. Kinds appear explicitly in typeful programming, such as a type constructor in the Haskell language." text="A type of types is a kind. Kinds appear explicitly in typeful programming, such as a type constructor in the Haskell language.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Types fall into several broad categories:" text="Types fall into several broad categories:">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Some languages like C# have a unified type system. This means that all C# types including primitive types inherit from a single root object. Every type in C# inherits from the Object class. Java has several primitive types that are not objects. Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types." text="Some languages like C# have a unified type system. This means that all C# types including primitive types inherit from a single root object. Every type in C# inherits from the Object class. Java has several primitive types that are not objects. Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="A type-checker for a statically typed language must verify that the type of any expression is consistent with the type expected by the context in which that expression appears. For instance, in an assignment statement of the form x&#160;:= e, the inferred type of the expression e must be consistent with the declared or inferred type of the variable x. This notion of consistency, called compatibility, is specific to each programming language." text="A type-checker for a statically typed language must verify that the type of any expression is consistent with the type expected by the context in which that expression appears. For instance, in an assignment statement of the form x&#160;:= e, the inferred type of the expression e must be consistent with the declared or inferred type of the variable x. This notion of consistency, called compatibility, is specific to each programming language.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="If the type of e and the type of x are the same and assignment is allowed for that type, then this is a valid expression. In the simplest type systems, therefore, the question of whether two types are compatible reduces to that of whether they are equal (or equivalent). Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different equational theories of types vary widely, two extreme cases being structural type systems, in which any two types are equivalent that describe values with the same structure, and nominative type systems, in which no two syntactically distinct type expressions denote the same type (i.e., types must have the same &#34;name&#34; in order to be equal)." text="If the type of e and the type of x are the same and assignment is allowed for that type, then this is a valid expression. In the simplest type systems, therefore, the question of whether two types are compatible reduces to that of whether they are equal (or equivalent). Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different equational theories of types vary widely, two extreme cases being structural type systems, in which any two types are equivalent that describe values with the same structure, and nominative type systems, in which no two syntactically distinct type expressions denote the same type (i.e., types must have the same &#34;name&#34; in order to be equal).">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="In languages with subtyping, the compatibility relation is more complex. In particular, if A is a subtype of B, then a value of type A can be used in a context where one of type B is expected, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc polymorphism in a language may also have implications for type compatibility." text="In languages with subtyping, the compatibility relation is more complex. In particular, if A is a subtype of B, then a value of type A can be used in a context where one of type B is expected, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc polymorphism in a language may also have implications for type compatibility.">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
        <text_clipping context="Some programmers prefer statically typed languages; others prefer dynamically typed languages. Statically typed languages alert programmers to type errors during compilation, and they may perform better at runtime. Advocates of dynamically typed languages claim they better support rapid prototyping and that type errors are only a small subset of errors in a program.[12][13] Likewise, there is often no need to manually declare all types in statically typed languages with type inference; thus, the need for the programmer to explicitly specify types of variables is automatically lowered for such languages; and some dynamic languages have run-time optimisers[14][15] that can generate fast code approaching the speed of static language compilers, often by using partial type inference.[citation needed]" text="Some programmers prefer statically typed languages; others prefer dynamically typed languages. Statically typed languages alert programmers to type errors during compilation, and they may perform better at runtime. Advocates of dynamically typed languages claim they better support rapid prototyping and that type errors are only a small subset of errors in a program.[12][13] Likewise, there is often no need to manually declare all types in statically typed languages with type inference; thus, the need for the programmer to explicitly specify types of variables is automatically lowered for such languages; and some dynamic languages have run-time optimisers[14][15] that can generate fast code approaching the speed of static language compilers, often by using partial type inference.[citation needed]">
          <source_doc>
            <wikipedia_page simpl:ref="7063355"/>
          </source_doc>
        </text_clipping>
      </clippings>
      <paragraphs>
        <paragraph mm_name="paragraphs" paragraph_text="Type safety&#10;Inferred vs. Manifest&#10;Dynamic vs. Static&#10;Strong vs. Weak&#10;Nominal vs. Structural&#10;Dependent typing&#10;Duck typing&#10;Latent typing&#10;Linear typing&#10;Uniqueness typing">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Type safety" link="http://en.wikipedia.org/wiki/Type_safety" target_title="Type safety"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Inferred" link="http://en.wikipedia.org/wiki/Type_inference" target_title="Type inference"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Manifest" link="http://en.wikipedia.org/wiki/Manifest_typing" target_title="Manifest typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Dynamic" link="http://en.wikipedia.org/wiki/Type_system" target_title="Type system"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Static" link="http://en.wikipedia.org/wiki/Type_system" target_title="Type system"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Strong" link="http://en.wikipedia.org/wiki/Strong_typing" target_title="Strong typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Weak" link="http://en.wikipedia.org/wiki/Weak_typing" target_title="Weak typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Nominal" link="http://en.wikipedia.org/wiki/Nominative_type_system" target_title="Nominative type system"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Structural" link="http://en.wikipedia.org/wiki/Structural_type_system" target_title="Structural type system"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Dependent typing" link="http://en.wikipedia.org/wiki/Dependent_type" target_title="Dependent type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Duck typing" link="http://en.wikipedia.org/wiki/Duck_typing" target_title="Duck typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Latent typing" link="http://en.wikipedia.org/wiki/Latent_typing" target_title="Latent typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Linear typing" link="http://en.wikipedia.org/wiki/Linear_type_system" target_title="Linear type system"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Uniqueness typing" link="http://en.wikipedia.org/wiki/Uniqueness_type" target_title="Uniqueness type"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A type system associates a type with each computed value. By examining the flow of these values, a type system attempts to ensure or prove that no type errors can occur. The particular type system in question determines exactly what constitutes a type error, but in general the aim is to prevent operations expecting a certain kind of value being used with values for which that operation does not make sense (logic errors); memory errors will also be prevented. Type systems are often specified as part of programming languages, and built into the interpreters and compilers for them; although they can also be implemented as optional tools.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="logic errors" link="http://en.wikipedia.org/wiki/Logic_error" target_title="Logic error"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="memory errors" link="http://en.wikipedia.org/wiki/Memory_error" target_title="Memory error"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="programming languages" link="http://en.wikipedia.org/wiki/Programming_language" target_title="Programming language"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="optional tools" link="http://en.wikipedia.org/wiki/Extended_static_checking" target_title="Extended static checking"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In computer science, a type system may be defined as &#34;a tractable syntactic framework for classifying phrases according to the kinds of values they compute&#34;.[1]">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="computer science" link="http://en.wikipedia.org/wiki/Computer_science" target_title="Computer science"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="syntactic" link="http://en.wikipedia.org/wiki/Syntax_(programming_languages)" target_title="Syntax (programming languages)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="values" link="http://en.wikipedia.org/wiki/Value_(computer_science)" target_title="Value (computer science)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A compiler may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many C compilers the float data type, for example, is represented in 32 bits, in accord with the IEEE specification for single-precision floating point numbers. They will thus use floating-point-specific microprocessor operations on those values (floating-point addition, multiplication, etc.).">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="compiler" link="http://en.wikipedia.org/wiki/Compiler" target_title="Compiler"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C" link="http://en.wikipedia.org/wiki/C_(programming_language)" target_title="C (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="data type" link="http://en.wikipedia.org/wiki/Data_type" target_title="Data type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="bits" link="http://en.wikipedia.org/wiki/Bit" target_title="Bit"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="IEEE specification for single-precision floating point numbers" link="http://en.wikipedia.org/wiki/IEEE_754-2008" target_title="IEEE 754-2008"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="microprocessor operations" link="http://en.wikipedia.org/wiki/Instruction_set" target_title="Instruction set"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="The depth of type constraints and the manner of their evaluation affect the typing of the language. A programming language may further associate an operation with varying concrete algorithms on each type in the case of type polymorphism. Type theory is the study of type systems, although the concrete type systems of programming languages originate from practical issues of computer architecture, compiler implementation, and language design.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="programming language" link="http://en.wikipedia.org/wiki/Programming_language" target_title="Programming language"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="type polymorphism" link="http://en.wikipedia.org/wiki/Type_polymorphism" target_title="Type polymorphism"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Type theory" link="http://en.wikipedia.org/wiki/Type_theory" target_title="Type theory"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Assigning data types (typing) gives meaning to sequences of bits. Types usually have associations either with values in memory or with objects such as variables. Because any value simply consists of a sequence of bits in a computer, hardware makes no intrinsic distinction even between memory addresses, instruction code, characters, integers and floating-point numbers, being unable to discriminate between them based on bit pattern alone. Associating a sequence of bits and a type informs programs and programmers how that sequence of bits should be understood.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="bits" link="http://en.wikipedia.org/wiki/Bit" target_title="Bit"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="memory" link="http://en.wikipedia.org/wiki/Computer_memory" target_title="Computer memory"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="objects" link="http://en.wikipedia.org/wiki/Object_(computer_science)" target_title="Object (computer science)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="variables" link="http://en.wikipedia.org/wiki/Variable_(computer_science)" target_title="Variable (computer science)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="computer" link="http://en.wikipedia.org/wiki/Computer" target_title="Computer"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="memory addresses" link="http://en.wikipedia.org/wiki/Memory_address" target_title="Memory address"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="instruction code" link="http://en.wikipedia.org/wiki/Instruction_code_(programming)" target_title="Instruction code (programming)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="characters" link="http://en.wikipedia.org/wiki/Character_(computing)" target_title="Character (computing)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="integers" link="http://en.wikipedia.org/wiki/Integer" target_title="Integer"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="floating-point numbers" link="http://en.wikipedia.org/wiki/Floating-point_number" target_title="Floating-point number"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Advantages provided by type systems include:"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Strong type systems can also have a downside, particularly with regard to forcing the programmer to engage in the unnecessary &#34;bookkeeping&#34; of making unnecessary explicit conversions in contexts where an implicit conversion would cause no harm. Pascal&#39;s type system has been described as &#34;too strong&#34;, because the size of an array or string is part of its type, making some programming tasks very difficult.[2][3] On the contrary, in some languages, such as Haskell, types are automatically inferred, so despite the strong type system, (most) type annotations are unnecessary.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Haskell" link="http://en.wikipedia.org/wiki/Haskell_(programming_language)" target_title="Haskell (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Type safety contributes to program correctness, but cannot guarantee it unless the type checking itself becomes an undecidable problem. Depending on the specific type system, a program may give the wrong result and be safely typed, producing no compiler errors. For instance, division by zero is not caught by the type checker in most programming languages; instead it is a runtime error. To prove the absence of more general defects, other kinds of formal methods, collectively known as program analyses, are in common use, as well as software testing, a widely used empirical method for finding errors that the type checker cannot detect.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="program correctness" link="http://en.wikipedia.org/wiki/Program_correctness" target_title="Program correctness"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="undecidable problem" link="http://en.wikipedia.org/wiki/Undecidable_problem" target_title="Undecidable problem"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="division by zero" link="http://en.wikipedia.org/wiki/Division_by_zero" target_title="Division by zero"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="runtime error" link="http://en.wikipedia.org/wiki/Runtime_error" target_title="Runtime error"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="formal methods" link="http://en.wikipedia.org/wiki/Formal_method" target_title="Formal method"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="program analyses" link="http://en.wikipedia.org/wiki/Program_analysis_(computer_science)" target_title="Program analysis (computer science)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="software testing" link="http://en.wikipedia.org/wiki/Software_testing" target_title="Software testing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="empirical" link="http://en.wikipedia.org/wiki/Empirical" target_title="Empirical"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A program typically associates each value with one particular type (although a type may have more than one subtype). Other entities, such as objects, modules, communication channels, dependencies, or even types themselves, can become associated with a type. Some implementations might make the following identifications (though these are technically different concepts):">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="subtype" link="http://en.wikipedia.org/wiki/Subtype" target_title="Subtype"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="objects" link="http://en.wikipedia.org/wiki/Object_(computer_science)" target_title="Object (computer science)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="modules" link="http://en.wikipedia.org/wiki/Module_(programming)" target_title="Module (programming)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="dependencies" link="http://en.wikipedia.org/wiki/Dependency_(computer_science)" target_title="Dependency (computer science)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A type system, specified for each programming language, controls the ways typed programs may behave, and makes behavior outside these rules illegal. An effect system typically provides more fine-grained control than does a type system."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Formally, type theory studies type systems. More elaborate type systems (such as dependent types) allow for finer-grained program specifications to be verified by a type checker, but this comes at a price, as type inference and other properties generally become undecidable, and type checking itself is dependent on user-supplied proofs. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in type safe manner. As Mark Manasse concisely put it:[4]">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="type theory" link="http://en.wikipedia.org/wiki/Type_theory" target_title="Type theory"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="dependent types" link="http://en.wikipedia.org/wiki/Dependent_type" target_title="Dependent type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="undecidable" link="http://en.wikipedia.org/wiki/Undecidable_problem" target_title="Undecidable problem"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="type safe" link="http://en.wikipedia.org/wiki/Type_safe" target_title="Type safe"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Mark Manasse" link="http://en.wikipedia.org/w/index.php?title=Mark_Manasse&amp;action=edit&amp;redlink=1" target_title="Mark Manasse (page does not exist)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="The process of verifying and enforcing the constraints of types &#8211; type checking &#8211; may occur either at compile-time (a static check) or run-time (a dynamic check). If a language specification requires its typing rules strongly (i.e., more or less allowing only those automatic type conversions that do not lose information), one can refer to the process as strongly typed, if not, as weakly typed. The terms are not usually used in a strict sense.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="compile-time" link="http://en.wikipedia.org/wiki/Compile-time" target_title="Compile-time"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="run-time" link="http://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)" target_title="Run time (program lifecycle phase)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time. Statically typed languages include ActionScript 3, Ada, C, D, Eiffel, F#, Fortran, Go, Haskell, haXe, JADE, Java, ML, Objective-C, OCaml, Pascal, Seed7 and Scala. C++ is statically typed, aside from its run-time type information system. The C# type system performs static-like compile-time type checking, but also includes full runtime type checking. Perl is statically typed with respect to distinguishing arrays, hashes, scalars, and subroutines.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="ActionScript" link="http://en.wikipedia.org/wiki/ActionScript" target_title="ActionScript"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Ada" link="http://en.wikipedia.org/wiki/Ada_(programming_language)" target_title="Ada (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C" link="http://en.wikipedia.org/wiki/C_(programming_language)" target_title="C (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="D" link="http://en.wikipedia.org/wiki/D_(programming_language)" target_title="D (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Eiffel" link="http://en.wikipedia.org/wiki/Eiffel_(programming_language)" target_title="Eiffel (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="F#" link="http://en.wikipedia.org/wiki/F_Sharp_(programming_language)" target_title="F Sharp (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Fortran" link="http://en.wikipedia.org/wiki/Fortran" target_title="Fortran"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Go" link="http://en.wikipedia.org/wiki/Go_(programming_language)" target_title="Go (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Haskell" link="http://en.wikipedia.org/wiki/Haskell_(programming_language)" target_title="Haskell (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="haXe" link="http://en.wikipedia.org/wiki/HaXe" target_title="HaXe"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="JADE" link="http://en.wikipedia.org/wiki/JADE_(programming_language)" target_title="JADE (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Java" link="http://en.wikipedia.org/wiki/Java_(programming_language)" target_title="Java (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="ML" link="http://en.wikipedia.org/wiki/ML_(programming_language)" target_title="ML (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Objective-C" link="http://en.wikipedia.org/wiki/Objective-C" target_title="Objective-C"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="OCaml" link="http://en.wikipedia.org/wiki/OCaml" target_title="OCaml"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Pascal" link="http://en.wikipedia.org/wiki/Pascal_(programming_language)" target_title="Pascal (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Seed7" link="http://en.wikipedia.org/wiki/Seed7" target_title="Seed7"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Scala" link="http://en.wikipedia.org/wiki/Scala_(programming_language)" target_title="Scala (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C++" link="http://en.wikipedia.org/wiki/C%2B%2B" target_title="C++"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="run-time type information" link="http://en.wikipedia.org/wiki/Run-time_type_information" target_title="Run-time type information"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C#" link="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target_title="C Sharp (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Perl" link="http://en.wikipedia.org/wiki/Perl" target_title="Perl"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Static typing is a limited form of program verification (see type safety): accordingly, it allows many type errors to be caught early in the development cycle. Static type checkers evaluate only the type information that can be determined at compile time, but are able to verify that the checked conditions hold for all possible executions of the program, which eliminates the need to repeat type checks every time the program is executed. Program execution may also be made more efficient (e.g. faster or taking reduced memory) by omitting runtime type checks and enabling other optimizations.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="program verification" link="http://en.wikipedia.org/wiki/Program_verification" target_title="Program verification"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="type safety" link="http://en.wikipedia.org/wiki/Type_safety" target_title="Type safety"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="caught early" link="http://en.wikipedia.org/wiki/Fail-fast" target_title="Fail-fast"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Because they evaluate type information during compilation and therefore lack type information that is only available at run-time, static type checkers are conservative. They will reject some programs that may be well-behaved at run-time, but that cannot be statically determined to be well-typed. For example, even if an expression &lt;complex test&gt; always evaluates to true at run-time, a program containing the code."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="will be rejected as ill-typed, because a static analysis cannot determine that the else branch won&#39;t be taken.[1] The conservative behaviour of static type checkers is advantageous when &lt;complex test&gt; evaluates to false infrequently: A static type checker can detect type errors in rarely used code paths. Without static type checking, even code coverage tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="code coverage" link="http://en.wikipedia.org/wiki/Code_coverage" target_title="Code coverage"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="The most widely used statically typed languages are not formally type safe. They have &#34;loopholes&#34; in the programming language specification enabling programmers to write code that circumvents the verification performed by a static type checker and so address a wider range of problems. For example, most C-style languages have type punning, and Haskell has such features as unsafePerformIO: such operations may be unsafe at runtime, in that they can cause unwanted behaviour due to incorrect typing of values when the program runs.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="used" link="http://en.wikipedia.org/wiki/Tiobe_index" target_title="Tiobe index"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="type safe" link="http://en.wikipedia.org/wiki/Type_safety" target_title="Type safety"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="loopholes" link="http://en.wikipedia.org/wiki/Loopholes" target_title="Loopholes"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="programming language specification" link="http://en.wikipedia.org/wiki/Programming_language_specification" target_title="Programming language specification"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="type punning" link="http://en.wikipedia.org/wiki/Type_punning" target_title="Type punning"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A programming language is said to be dynamically typed when the majority of its type checking is performed at run-time as opposed to at compile-time. In dynamic typing values have types, but variables do not; that is, a variable can refer to a value of any type. Dynamically typed languages include APL, Erlang, Groovy, JavaScript, Lisp, Lua, MATLAB, GNU Octave, Perl (for user-defined types, but not built-in types), PHP, Pick BASIC, Prolog, Python, Ruby, Smalltalk and Tcl.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="APL" link="http://en.wikipedia.org/wiki/APL_(programming_language)" target_title="APL (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Erlang" link="http://en.wikipedia.org/wiki/Erlang_(programming_language)" target_title="Erlang (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Groovy" link="http://en.wikipedia.org/wiki/Groovy_(programming_language)" target_title="Groovy (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="JavaScript" link="http://en.wikipedia.org/wiki/JavaScript" target_title="JavaScript"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Lisp" link="http://en.wikipedia.org/wiki/Lisp_(programming_language)" target_title="Lisp (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Lua" link="http://en.wikipedia.org/wiki/Lua_(programming_language)" target_title="Lua (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="MATLAB" link="http://en.wikipedia.org/wiki/MATLAB" target_title="MATLAB"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="GNU Octave" link="http://en.wikipedia.org/wiki/GNU_Octave" target_title="GNU Octave"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Perl" link="http://en.wikipedia.org/wiki/Perl" target_title="Perl"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="PHP" link="http://en.wikipedia.org/wiki/PHP" target_title="PHP"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Pick BASIC" link="http://en.wikipedia.org/wiki/Pick_operating_system" target_title="Pick operating system"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Prolog" link="http://en.wikipedia.org/wiki/Prolog_(programming_language)" target_title="Prolog (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Python" link="http://en.wikipedia.org/wiki/Python_(programming_language)" target_title="Python (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Ruby" link="http://en.wikipedia.org/wiki/Ruby_(programming_language)" target_title="Ruby (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Smalltalk" link="http://en.wikipedia.org/wiki/Smalltalk" target_title="Smalltalk"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Tcl" link="http://en.wikipedia.org/wiki/Tcl" target_title="Tcl"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Implementations of dynamically typed languages generally associate run-time objects with &#34;tags&#34; containing their type information. This run-time classification is then used to implement type checks and dispatch overloaded functions, but can also enable pervasive uses of dynamic dispatch, late binding and similar idioms that would be cumbersome at best in a statically typed language, requiring the use of variant types or similar features.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="overloaded" link="http://en.wikipedia.org/wiki/Function_overloading" target_title="Function overloading"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="dynamic dispatch" link="http://en.wikipedia.org/wiki/Dynamic_dispatch" target_title="Dynamic dispatch"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="late binding" link="http://en.wikipedia.org/wiki/Late_binding" target_title="Late binding"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="variant types" link="http://en.wikipedia.org/wiki/Variant_type" target_title="Variant type"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="More broadly, as explained below, dynamic typing can improve support for dynamic programming language features, such as generating types and functionality based on run-time data. (Nevertheless, dynamically typed languages need not support any or all such features, and some dynamic programming languages are statically typed.) On the other hand, dynamic typing provides fewer a priori guarantees: a dynamically typed language accepts and attempts to execute some programs that would be ruled as invalid by a static type checker, either due to errors in the program or due to static type checking being too conservative.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="dynamic programming language" link="http://en.wikipedia.org/wiki/Dynamic_programming_language" target_title="Dynamic programming language"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Dynamic typing may result in runtime type errors&#8212;that is, at runtime, a value may have an unexpected type, and an operation nonsensical for that type is applied. Such errors may occur long after the place where the programming mistake was made&#8212;that is, the place where the wrong type of data passed into a place it should not have. This may make the bug difficult to locate."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Dynamically typed language systems&#39; run-time checks can potentially be more sophisticated than those of statically typed languages, as they can use dynamic information as well as any information from the source code. On the other hand, runtime checks only assert that conditions hold in a particular execution of the program, and the checks are repeated for every execution of the program."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Development in dynamically typed languages is often supported by programming practices such as unit testing. Testing is a key practice in professional software development, and is particularly important in dynamically typed languages. In practice, the testing done to ensure correct program operation can detect a much wider range of errors than static type-checking, but full test coverage over all possible executions of a program (including timing, user inputs, etc.), if even possible, would be extremely costly and impractical. Static typing helps by providing strong guarantees of a particular subset of commonly made errors never occurring">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="unit testing" link="http://en.wikipedia.org/wiki/Unit_testing" target_title="Unit testing"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="The presence of static typing in a programming language does not necessarily imply the absence of all dynamic typing mechanisms. For example, Java and some other ostensibly statically typed languages, support downcasting and other type operations that depend on runtime type checks, a form of dynamic typing. More generally, most programming languages include mechanisms for dispatching over different &#39;kinds&#39; of data, such as disjoint unions, polymorphic objects, and variant types: Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See programming language for more discussion of the interactions between static and dynamic typing.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="downcasting" link="http://en.wikipedia.org/wiki/Downcasting" target_title="Downcasting"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="disjoint unions" link="http://en.wikipedia.org/wiki/Disjoint_union" target_title="Disjoint union"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="polymorphic objects" link="http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" target_title="Polymorphism in object-oriented programming"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="variant types" link="http://en.wikipedia.org/wiki/Variant_type" target_title="Variant type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="programming language" link="http://en.wikipedia.org/wiki/Programming_language" target_title="Programming language"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Certain languages, for example Clojure, Common Lisp, or Cython, are dynamically typed by default, but allow this behaviour to be overridden through the use of explicit type hints that result in static typing. One reason to use such hints would be to achieve the performance benefits of static typing in performance-sensitive parts of code.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Clojure" link="http://en.wikipedia.org/wiki/Clojure" target_title="Clojure"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Common Lisp" link="http://en.wikipedia.org/wiki/Common_Lisp" target_title="Common Lisp"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Cython" link="http://en.wikipedia.org/wiki/Cython" target_title="Cython"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="As of the 4.0 Release, the .NET Framework supports a variant of dynamic typing via the System.Dynamic namespace whereby a static object of type &#39;dynamic&#39; is a placeholder for the .NET runtime to interrogate its dynamic facilities to resolve the object reference."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="The choice between static and dynamic typing requires trade-offs.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="trade-offs" link="http://en.wikipedia.org/wiki/Trade-off" target_title="Trade-off"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Static typing can find type errors reliably at compile time. This should increase the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, and thus disagree over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code. Static typing advocates believe programs are more reliable when they have been well type-checked, while dynamic typing advocates point to distributed code that has proven reliable and to small bug databases. The value of static typing, then, presumably increases as the strength of the type system is increased. Advocates of dependently typed languages such as Dependent ML and Epigram have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.[5]">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="dependently typed languages" link="http://en.wikipedia.org/wiki/Dependent_type" target_title="Dependent type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Dependent ML" link="http://en.wikipedia.org/wiki/Dependent_ML" target_title="Dependent ML"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Epigram" link="http://en.wikipedia.org/wiki/Epigram_(programming_language)" target_title="Epigram (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Static typing usually results in compiled code that executes more quickly. When the compiler knows the exact data types that are in use, it can produce optimized machine code. Further, compilers for statically typed languages can find assembler shortcuts more easily. Some dynamically typed languages such as Common Lisp allow optional type declarations for optimization for this very reason. Static typing makes this pervasive. See optimization.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Common Lisp" link="http://en.wikipedia.org/wiki/Common_Lisp" target_title="Common Lisp"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="optimization" link="http://en.wikipedia.org/wiki/Optimization_(computer_science)" target_title="Optimization (computer science)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="By contrast, dynamic typing may allow compilers to run more quickly and allow interpreters to dynamically load new code, since changes to source code in dynamically typed languages may result in less checking to perform and less code to revisit. This too may reduce the edit-compile-test-debug cycle.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="interpreters" link="http://en.wikipedia.org/wiki/Language_interpretation" target_title="Language interpretation"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Statically typed languages that lack type inference (such as C and Java) require that programmers declare the types they intend a method or function to use. This can serve as additional documentation for the program, which the compiler will not permit the programmer to ignore or permit to drift out of synchronization. However, a language can be statically typed without requiring type declarations (examples include Haskell, Scala, OCaml and to a lesser extent C#), so explicit type declaration is not a necessary requirement for static typing in all languages.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="type inference" link="http://en.wikipedia.org/wiki/Type_inference" target_title="Type inference"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Haskell" link="http://en.wikipedia.org/wiki/Haskell_(programming_language)" target_title="Haskell (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Scala" link="http://en.wikipedia.org/wiki/Scala_(programming_language)" target_title="Scala (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="OCaml" link="http://en.wikipedia.org/wiki/OCaml_(programming_language)" target_title="OCaml (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C#" link="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target_title="C Sharp (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Dynamic typing allows constructs that some static type checking would reject as illegal. For example, eval functions, which execute arbitrary data as code, become possible. An eval function is possible with static typing, but requires advanced uses of algebraic data types. Furthermore, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure (mock object) to be transparently used in place of a full-fledged data structure (usually for the purposes of experimentation and testing).">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="algebraic data types" link="http://en.wikipedia.org/wiki/GADT" target_title="GADT"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="mock object" link="http://en.wikipedia.org/wiki/Mock_object" target_title="Mock object"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Dynamic typing typically allows duck typing (which enables easier code reuse). Many languages with static typing also feature duck typing or other mechanisms like generic programming which also enables easier code reuse.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="duck typing" link="http://en.wikipedia.org/wiki/Duck_typing" target_title="Duck typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="easier code reuse" link="http://en.wikipedia.org/wiki/Duck_typing" target_title="Duck typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="duck typing" link="http://en.wikipedia.org/wiki/Duck_typing" target_title="Duck typing"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="generic programming" link="http://en.wikipedia.org/wiki/Generic_programming" target_title="Generic programming"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Dynamic typing typically makes metaprogramming easier to use. For example, C++ templates are typically more cumbersome to write than the equivalent Ruby or Python code. More advanced run-time constructs such as metaclasses and introspection are often more difficult to use in statically typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by dynamic programming languages; many of these are dynamically typed, although dynamic typing need not be related to dynamic programming languages.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="metaprogramming" link="http://en.wikipedia.org/wiki/Metaprogramming" target_title="Metaprogramming"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C++" link="http://en.wikipedia.org/wiki/C%2B%2B" target_title="C++"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="templates" link="http://en.wikipedia.org/wiki/Template_(programming)" target_title="Template (programming)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Ruby" link="http://en.wikipedia.org/wiki/Ruby_(programming_language)" target_title="Ruby (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Python" link="http://en.wikipedia.org/wiki/Python_(programming_language)" target_title="Python (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="metaclasses" link="http://en.wikipedia.org/wiki/Metaclass" target_title="Metaclass"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="introspection" link="http://en.wikipedia.org/wiki/Introspection_(computer_science)" target_title="Introspection (computer science)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="dynamic programming languages" link="http://en.wikipedia.org/wiki/Dynamic_programming_language" target_title="Dynamic programming language"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In 1974 Liskov and Zilles described a strong-typed language as one in which &#34;whenever an object is passed from a calling function to a called function, its type must be compatible with the type declared in the called function.&#34;[6] Jackson wrote, &#34;In a strongly typed language each data area will have a distinct type and each process will state its communication requirements in terms of these types.&#34;[7]"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A type system is said to feature strong typing when it specifies one or more restrictions on how operations involving values of different data types can be intermixed. A computer language that implements strong typing will prevent the successful execution of an operation on arguments that have the wrong type."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Weak typing means that a language implicitly converts (or casts) types when used. Consider the following example:"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In a weakly typed language, the result of this operation depends on language-specific rules. Visual Basic would convert the string &#34;37&#34; into the number 37, perform addition, and produce the number 42. JavaScript would convert the number 5 to the string &#34;5&#34;, perform string concatenation, and produce the string &#34;537.&#34; In JavaScript, the conversion to string is applied regardless of the order of the operands (for example, y + x would be &#34;375&#34;) while in AppleScript, the left-most operand determines the type of the result, so that x + y is the number 42 but y + x is the string &#34;375&#34;.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Visual Basic" link="http://en.wikipedia.org/wiki/Visual_Basic" target_title="Visual Basic"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="JavaScript" link="http://en.wikipedia.org/wiki/JavaScript" target_title="JavaScript"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="AppleScript" link="http://en.wikipedia.org/wiki/AppleScript" target_title="AppleScript"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In the same manner, due to JavaScript&#39;s dynamic type conversions:"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A C cast gone wrong exemplifies the problems that can occur if strong typing is absent: if a programmer casts a value from one type to another in C, not only must the compiler allow the code at compile time, but the runtime must allow it as well. This may permit more compact and faster C code, but it can make debugging more difficult.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="C" link="http://en.wikipedia.org/wiki/C_(programming_language)" target_title="C (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="cast" link="http://en.wikipedia.org/wiki/Type_conversion" target_title="Type conversion"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="debugging" link="http://en.wikipedia.org/wiki/Debugging" target_title="Debugging"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A third way of categorizing the type system of a programming language uses the safety of typed operations and conversions. Computer scientists consider a language &#34;type-safe&#34;, if it does not allow operations or conversions that lead to erroneous conditions."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Some observers use the term memory-safe language (or just safe language) to describe languages that do not allow undefined operations to occur. For example, a memory-safe language will check array bounds, or else statically guarantee (i.e., at compile time before execution) that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="check array bounds" link="http://en.wikipedia.org/wiki/Bounds_checking" target_title="Bounds checking"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In languages like Visual Basic, variable z in the example acquires the value 42. While the programmer may or may not have intended this, the language defines the result specifically, and the program does not crash or assign an ill-defined value to z. In this respect, such languages are type-safe; however, in some languages, if the value of y was a string that could not be converted to a number (e.g. &#34;Hello World&#34;), the results would be undefined. Such languages are type-safe (in that they will not crash), but can easily produce undesirable results. In other languages like JavaScript, the numeric operand would be converted to a string, and then concatenation performed. In this case, the results are not undefined and are predictable.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Visual Basic" link="http://en.wikipedia.org/wiki/Visual_Basic" target_title="Visual Basic"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="JavaScript" link="http://en.wikipedia.org/wiki/JavaScript" target_title="JavaScript"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Now let us look at the same example in C:"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In this example z will point to a memory address five characters beyond y, equivalent to three characters after the terminating zero character of the string pointed to by y. The content of that location is undefined, and might lie outside addressable memory. The mere computation of such a pointer may result in undefined behavior (including the program crashing) according to C standards, and in typical systems dereferencing z at this point could cause the program to crash. We have a well-typed, but not memory-safe program&#8212;a condition that cannot occur in a type-safe language.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="dereferencing" link="http://en.wikipedia.org/wiki/Dereference" target_title="Dereference"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In some languages, like JavaScript, the use of special numeric values and constants allows type-safety for mathematical operations without resulting in runtime errors. For example, when dividing a Number by a String, or a Number by zero.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="JavaScript" link="http://en.wikipedia.org/wiki/JavaScript" target_title="JavaScript"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Some languages allow different levels of checking to apply to different regions of code. Examples include:-"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Additional tools such as lint and IBM Rational Purify can also be used to achieve a higher level of strictness.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="lint" link="http://en.wikipedia.org/wiki/Lint_(software)" target_title="Lint (software)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="IBM Rational Purify" link="http://en.wikipedia.org/wiki/IBM_Rational_Purify" target_title="IBM Rational Purify"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="It has been proposed, chiefly by Gilad Bracha, that the choice of type system be made independent of choice of language; that a type system should be a module that can be &#34;plugged&#34; into a language as required. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.[8] The requirement that types do not affect the semantics of the language is difficult to fulfil: for instance, class based inheritance becomes impossible.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Gilad Bracha" link="http://en.wikipedia.org/wiki/Gilad_Bracha" target_title="Gilad Bracha"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="The term &#34;polymorphism&#34; refers to the ability of code (in particular, methods or classes) to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an associative array once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism generic programming. The type-theoretic foundations of polymorphism are closely related to those of abstraction, modularity and (in some cases) subtyping.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="associative array" link="http://en.wikipedia.org/wiki/Associative_array" target_title="Associative array"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="abstraction" link="http://en.wikipedia.org/wiki/Abstraction_(computer_science)" target_title="Abstraction (computer science)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="modularity" link="http://en.wikipedia.org/wiki/Module_(programming)" target_title="Module (programming)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="subtyping" link="http://en.wikipedia.org/wiki/Subtype" target_title="Subtype"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In &#34;duck typing&#34;,[9] a statement calling a method m on an object does not rely on the declared type of the object; only that the object, of whatever type, must supply an implementation of the method called, when called, at run-time.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="method" link="http://en.wikipedia.org/wiki/Method_(computer_science)" target_title="Method (computer science)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Duck typing differs from structural typing in that, if the part (of the whole module structure) needed for a given local computation is present at runtime, the duck type system is satisfied in its type identity analysis. On the other hand, a structural type system would require the analysis of the whole module structure at compile time to determine type identity or type dependence.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="structural typing" link="http://en.wikipedia.org/wiki/Structural_type_system" target_title="Structural type system"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Duck typing differs from a nominative type system in a number of aspects. The most prominent ones are that for duck typing, type information is determined at runtime (as contrasted to compile time), and the name of the type is irrelevant to determine type identity or type dependence; only partial structure information is required for that for a given point in the program execution.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="nominative type system" link="http://en.wikipedia.org/wiki/Nominative_type_system" target_title="Nominative type system"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Duck typing uses the premise that (referring to a value) &#34;if it walks like a duck, and quacks like a duck, then it is a duck&#34; (this is a reference to the duck test that is attributed to James Whitcomb Riley). The term may have been coined[citation needed] by Alex Martelli in a 2000 message[10] to the comp.lang.python newsgroup (see Python).">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="duck test" link="http://en.wikipedia.org/wiki/Duck_test" target_title="Duck test"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="James Whitcomb Riley" link="http://en.wikipedia.org/wiki/James_Whitcomb_Riley" target_title="James Whitcomb Riley"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Alex Martelli" link="http://en.wikipedia.org/wiki/Alex_Martelli" target_title="Alex Martelli"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="newsgroup" link="http://en.wikipedia.org/wiki/Newsgroup" target_title="Newsgroup"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Python" link="http://en.wikipedia.org/wiki/Python_(programming_language)" target_title="Python (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band static program analysis. Frequently, these are based on ideas from formal type theory and are only available as part of prototype research systems.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="static program analysis" link="http://en.wikipedia.org/wiki/Static_program_analysis" target_title="Static program analysis"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="type theory" link="http://en.wikipedia.org/wiki/Type_theory" target_title="Type theory"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Dependent types are based on the idea of using scalars or values to more precisely describe the type of some other value. For example,  might be the type of a 3&#215;3 matrix. We can then define typing rules such as the following rule for matrix multiplication:">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Dependent types" link="http://en.wikipedia.org/wiki/Dependent_type" target_title="Dependent type"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="where , ,  are arbitrary positive integer values. A variant of ML called Dependent ML has been created based on this type system, but because type checking for conventional dependent types is undecidable, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to Presburger arithmetic. Other languages such as Epigram make the value of all expressions in the language decidable so that type checking can be decidable. It is also possible to make the language[vague] Turing-complete at the price of undecidable type checking, as in Cayenne.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="ML" link="http://en.wikipedia.org/wiki/ML_(programming_language)" target_title="ML (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Dependent ML" link="http://en.wikipedia.org/wiki/Dependent_ML" target_title="Dependent ML"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="undecidable" link="http://en.wikipedia.org/wiki/Decidable_set" target_title="Decidable set"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Presburger arithmetic" link="http://en.wikipedia.org/wiki/Presburger_arithmetic" target_title="Presburger arithmetic"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Epigram" link="http://en.wikipedia.org/wiki/Epigram_(programming_language)" target_title="Epigram (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Cayenne" link="http://en.wikipedia.org/wiki/Cayenne_(programming_language)" target_title="Cayenne (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Linear types, based on the theory of linear logic, and closely related to uniqueness types, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large immutable values such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object (such as &#39;str = str + &#34;a&#34;&#39;) can be optimized &#34;under the hood&#34; into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating referential transparency. They are also used in the prototype operating system Singularity for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The Clean language (a Haskell-like language) uses this type system in order to gain a lot of speed[not specific enough to verify] while remaining safe.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Linear types" link="http://en.wikipedia.org/wiki/Linear_type" target_title="Linear type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="linear logic" link="http://en.wikipedia.org/wiki/Linear_logic" target_title="Linear logic"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="uniqueness types" link="http://en.wikipedia.org/wiki/Uniqueness_type" target_title="Uniqueness type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="immutable values" link="http://en.wikipedia.org/wiki/Immutable_value" target_title="Immutable value"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="referential transparency" link="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)" target_title="Referential transparency (computer science)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Singularity" link="http://en.wikipedia.org/wiki/Singularity_(operating_system)" target_title="Singularity (operating system)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Clean" link="http://en.wikipedia.org/wiki/Clean_(programming_language)" target_title="Clean (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Haskell" link="http://en.wikipedia.org/wiki/Haskell_(programming_language)" target_title="Haskell (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Intersection types are types describing values that belong to both of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting either signed or unsigned chars, because it is compatible with both types.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Intersection types" link="http://en.wikipedia.org/wiki/Intersection_type" target_title="Intersection type"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Intersection types are useful for describing overloaded function types: For example, if &#34;int &#8594; int&#34; is the type of functions taking an integer argument and returning an integer, and &#34;float &#8594; float&#34; is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an &#34;int &#8594; int&#34; function safely; it simply would not use the &#34;float &#8594; float&#34; functionality."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In a subclassing hierarchy, the intersection of a type and an ancestor type (such as its parent) is the most derived type. The intersection of sibling types is empty."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="The Forsythe language includes a general implementation of intersection types. A restricted form is refinement types.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="refinement types" link="http://en.wikipedia.org/wiki/Refinement_type" target_title="Refinement type"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Union types are types describing values that belong to either of two types. For example, in C, the signed char has range -128 to 127, and the unsigned char has range 0 to 255, so the union of these two types would have range -128 to 255. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on both types being unioned. C&#39;s &#34;union&#34; concept is similar to union types, but is not typesafe, as it permits operations that are valid on either type, rather than both. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature (e.g., value or type) is not known.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="Union types" link="http://en.wikipedia.org/wiki/Union_type" target_title="Union type"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In a subclassing hierarchy, the union of a type and an ancestor type (such as its parent) is the ancestor type. The union of sibling types is a subtype of their common ancestor (that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common)."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Existential types are frequently used in connection with record types to represent modules and abstract data types, due to their ability to separate implementation from interface. For example, the type &#34;T = &#8707;X { a: X; f: (X &#8594; int); }&#34; describes a module interface that has a data member of type X and a function that takes a parameter of the same type X and returns an integer. This could be implemented in different ways; for example:">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="record types" link="http://en.wikipedia.org/wiki/Record_type" target_title="Record type"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="modules" link="http://en.wikipedia.org/wiki/Module_(programming)" target_title="Module (programming)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="abstract data types" link="http://en.wikipedia.org/wiki/Abstract_data_type" target_title="Abstract data type"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value &#34;t&#34; of type &#34;T&#34;, we know that &#34;t.f(t.a)&#34; is well-typed, regardless of what the abstract type X is. This gives flexibility for choosing types suited to a particular implementation while clients that use only values of the interface type&#8212;the existential type&#8212;are isolated from these choices."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In general it&#39;s impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT { a: int; f: (int &#8594; int); } could also have the type &#8707;X { a: X; f: (int &#8594; int); }. The simplest solution is to annotate every module with its intended type, e.g.:"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn&#39;t until 1988 that John C. Mitchell and Gordon Plotkin established the formal theory under the slogan: &#34;Abstract [data] types have existential type&#34;.[11] The theory is a second-order typed lambda calculus similar to System F, but with existential instead of universal quantification.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="John C. Mitchell" link="http://en.wikipedia.org/wiki/John_C._Mitchell" target_title="John C. Mitchell"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Gordon Plotkin" link="http://en.wikipedia.org/wiki/Gordon_Plotkin" target_title="Gordon Plotkin"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="typed lambda calculus" link="http://en.wikipedia.org/wiki/Typed_lambda_calculus" target_title="Typed lambda calculus"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="System F" link="http://en.wikipedia.org/wiki/System_F" target_title="System F"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Many static type systems, such as those of C and Java, require type declarations: The programmer must explicitly associate each variable with a particular type. Others, such as Haskell&#39;s, perform type inference: The compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function f(x, y) that adds x and y together, the compiler can infer that x and y must be numbers &#8211; since addition is only defined for numbers. Therefore, any call to f elsewhere in the program that specifies a non-numeric type (such as a string or list) as an argument would signal an error."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression 3.14 might imply a type of floating-point, while [1, 2, 3] might imply a list of integers &#8211; typically an array.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="floating-point" link="http://en.wikipedia.org/wiki/Floating-point" target_title="Floating-point"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="array" link="http://en.wikipedia.org/wiki/Array_data_structure" target_title="Array data structure"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Type inference is in general possible, if it is decidable in the type theory in question. Moreover, even if inference is undecidable in general for a given type theory, inference is often possible for a large subset of real-world programs. Haskell&#39;s type system, a version of Hindley-Milner, is a restriction of System F&#969; to so-called rank-1 polymorphic types, in which type inference is decidable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference undecidable. (Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.)">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="decidable" link="http://en.wikipedia.org/wiki/Decidability_(logic)" target_title="Decidability (logic)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Hindley-Milner" link="http://en.wikipedia.org/wiki/Type_inference" target_title="Type inference"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="System F&#969;" link="http://en.wikipedia.org/wiki/System_F" target_title="System F"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A type of types is a kind. Kinds appear explicitly in typeful programming, such as a type constructor in the Haskell language.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="kind" link="http://en.wikipedia.org/wiki/Kind_(type_theory)" target_title="Kind (type theory)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="typeful programming" link="http://en.wikipedia.org/wiki/Typeful_programming" target_title="Typeful programming"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Haskell" link="http://en.wikipedia.org/wiki/Haskell_(programming_language)" target_title="Haskell (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Types fall into several broad categories:"></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Some languages like C# have a unified type system. This means that all C# types including primitive types inherit from a single root object. Every type in C# inherits from the Object class. Java has several primitive types that are not objects. Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="C#" link="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target_title="C Sharp (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C#" link="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target_title="C Sharp (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="C#" link="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target_title="C Sharp (programming language)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="Java" link="http://en.wikipedia.org/wiki/Java_(programming_language)" target_title="Java (programming language)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="A type-checker for a statically typed language must verify that the type of any expression is consistent with the type expected by the context in which that expression appears. For instance, in an assignment statement of the form x&#160;:= e, the inferred type of the expression e must be consistent with the declared or inferred type of the variable x. This notion of consistency, called compatibility, is specific to each programming language.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="expression" link="http://en.wikipedia.org/wiki/Expression_(programming)" target_title="Expression (programming)"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="assignment statement" link="http://en.wikipedia.org/wiki/Assignment_statement" target_title="Assignment statement"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="If the type of e and the type of x are the same and assignment is allowed for that type, then this is a valid expression. In the simplest type systems, therefore, the question of whether two types are compatible reduces to that of whether they are equal (or equivalent). Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different equational theories of types vary widely, two extreme cases being structural type systems, in which any two types are equivalent that describe values with the same structure, and nominative type systems, in which no two syntactically distinct type expressions denote the same type (i.e., types must have the same &#34;name&#34; in order to be equal)."></paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="In languages with subtyping, the compatibility relation is more complex. In particular, if A is a subtype of B, then a value of type A can be used in a context where one of type B is expected, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc polymorphism in a language may also have implications for type compatibility.">
          <anchors>
            <wiki_anchor mm_name="anchors" anchor_text="subtyping" link="http://en.wikipedia.org/wiki/Subtype" target_title="Subtype"></wiki_anchor>
            <wiki_anchor mm_name="anchors" anchor_text="polymorphism" link="http://en.wikipedia.org/wiki/Polymorphism_(computer_science)" target_title="Polymorphism (computer science)"></wiki_anchor>
          </anchors>
        </paragraph>
        <paragraph mm_name="paragraphs" paragraph_text="Some programmers prefer statically typed languages; others prefer dynamically typed languages. Statically typed languages alert programmers to type errors during compilation, and they may perform better at runtime. Advocates of dynamically typed languages claim they better support rapid prototyping and that type errors are only a small subset of errors in a program.[12][13] Likewise, there is often no need to manually declare all types in statically typed languages with type inference; thus, the need for the programmer to explicitly specify types of variables is automatically lowered for such languages; and some dynamic languages have run-time optimisers[14][15] that can generate fast code approaching the speed of static language compilers, often by using partial type inference.[citation needed]"></paragraph>
      </paragraphs>
      <categories>
        <category mm_name="categories" name="Data types" cat_link="http://en.wikipedia.org/wiki/Category:Data_types"></category>
        <category mm_name="categories" name="Program analysis" cat_link="http://en.wikipedia.org/wiki/Category:Program_analysis"></category>
        <category mm_name="categories" name="Type theory" cat_link="http://en.wikipedia.org/wiki/Category:Type_theory"></category>
      </categories>
    </wikipedia_page>
    <product mm_name="home_depot_product" location="http://www.homedepot.com/Flooring-Laminate-Flooring-Laminate-Wood-Planks/Pergo/h_d1/N-5yc1vZbejkZ150/R-202882882/h_d2/ProductDisplay?catalogId=10053&amp;langId=-1&amp;storeId=10051" price="$36.53" model="LF000317" simpl:id="1899350">
      <title>Pergo&#10;										&#10;										XP Highland Hickory 10mm Thick x 4-7/8 in. Width x 47-7/8 in. Length Laminate Flooring (13.1 sq. ft./case)</title>
      <clippings>
        <image_clipping simpl:id="16647091">
          <source_doc>
            <product simpl:ref="1899350"/>
          </source_doc>
          <media>
            <image location="http://www.homedepot.com/catalog/productImages/300/89/8948f9bc-4810-4c43-be7f-bbe8acb964fe_300.jpg" simpl:id="29276140">
              <clippings_this_is_in>
                <image_clipping simpl:ref="16647091"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
      </clippings>
      <image simpl:ref="29276140"/>
    </product>
    <product mm_name="overstock.com_product" location="http://www.overstock.com/Home-Garden/Bodipedic-Essentials-8-inch-Queen-size-Memory-Foam-Mattress/6153386/product.html?rcmndsrc=4" price="$269.99" overall_rating="4.7" simpl:id="3861570">
      <title>Bodipedic Essentials 8-inch Queen-size Memory Foam Mattress</title>
      <description>Allow yourself to rest comfortably on this Bodipedic Essentials memory foam mattress. The 2-inch SureTemp memory foam top layer offers all the benefits of traditional memory foam while maintaining an ideal sleeping temperature. This unique, patented formulation and manufacturing process results in improved airflow for a cooler night&#39;s sleep. The 6-inch premium base foam layer provides extra support that helps disperse your weight evenly.</description>
      <clippings>
        <image_clipping simpl:id="18771583">
          <source_doc>
            <product simpl:ref="3861570"/>
          </source_doc>
          <media>
            <image location="http://ak1.ostkcdn.com/images/products/77/293/P13811865.jpg" simpl:id="27820840">
              <clippings_this_is_in>
                <image_clipping simpl:ref="18771583"/>
              </clippings_this_is_in>
            </image>
          </media>
        </image_clipping>
      </clippings>
      <image simpl:ref="27820840"/>
    </product>
    <tvshow mm_name="tv_com" location="http://www.tv.com/shows/house">
      <title>House</title>
      <rating mm_name="rating" viewers_grade="9.2" viewers_number="36,071 votes"></rating>
      <episode_list>
        <tvshow_episode mm_name="episode_list" location="http://www.tv.com/shows/house/everybody-dies-2443284/">
          <title>Everybody Dies</title>
          <episode_number>22</episode_number>
        </tvshow_episode>
        <tvshow_episode mm_name="episode_list" location="http://www.tv.com/shows/house/holding-on-2445351/">
          <title>Holding On</title>
          <episode_number>21</episode_number>
        </tvshow_episode>
        <tvshow_episode mm_name="episode_list" location="http://www.tv.com/shows/house/post-mortem-2445350/">
          <title>Post Mortem</title>
          <episode_number>20</episode_number>
        </tvshow_episode>
        <tvshow_episode mm_name="episode_list" location="http://www.tv.com/shows/house/the-c-word-2441641/">
          <title>The C-Word</title>
          <episode_number>19</episode_number>
        </tvshow_episode>
        <tvshow_episode mm_name="episode_list" location="http://www.tv.com/shows/house/body-and-soul-2437756/">
          <title>Body and Soul</title>
          <episode_number>18</episode_number>
        </tvshow_episode>
      </episode_list>
      <similar_shows>
        <tvshow mm_name="tv_com" location="http://www.tv.com/shows/doc-martin/">
          <title>Doc Martin</title>
          <picture>http://im1n.clkimg.com/i/ss/013/13639.jpg</picture>
        </tvshow>
        <tvshow mm_name="tv_com" location="http://www.tv.com/shows/white-teeth/">
          <title>White Teeth</title>
          <picture>http://im0n.clkimg.com/i/ss/015/15588.jpg</picture>
        </tvshow>
        <tvshow mm_name="tv_com" location="http://www.tv.com/shows/niptuck/">
          <title>Nip/Tuck</title>
          <picture>http://im1n.clkimg.com/i/ss/002/2497.jpg</picture>
        </tvshow>
        <tvshow mm_name="tv_com" location="http://www.tv.com/shows/er/">
          <title>ER</title>
          <picture>http://im1n.clkimg.com/i/ss/000/349.jpg</picture>
        </tvshow>
        <tvshow mm_name="tv_com" location="http://www.tv.com/shows/bones/">
          <title>Bones</title>
          <picture>http://im1n.clkimg.com/i/ss/000/393.jpg</picture>
        </tvshow>
      </similar_shows>
    </tvshow>
<!--    <restaurant_genre mm_name="urban_spoon_genre" location="http://www.urbanspoon.com/f/114/11800/College-Station/American-Restaurants">
      <title>College Station American Restaurants | Urbanspoon</title>
      <restaurants>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875250/restaurant/Dixie-Chicken-College-Station">
          <title>Dixie Chicken</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875143/restaurant/College-Station/Sodolaks-Beefmasters-Restaurant-Bryan">
          <title>Sodolaks Beefmasters...</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875423/restaurant/Wings-N-More-Deacon-College-Station">
          <title>Wings &#39;N More - Deacon</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1428200/restaurant/College-Station/Maddens-Casual-Gourmet-Bryan">
          <title>Madden&#39;s Casual Gourmet</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875424/restaurant/Wings-N-More-University-College-Station">
          <title>Wings &#39;N More - University</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875058/restaurant/College-Station/Bryan-Fat-Burger-Bryan">
          <title>Bryan Fat Burger</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875031/restaurant/College-Station/Christophers-World-Grill-Bryan" link="http://www.christophersworldgrille.com/" rating="80%" price_range="$25 on up per entree" simpl:id="19419022">
          <title>Christopher&#39;s World Grill</title>
          <clippings>
            <image_clipping simpl:id="32249716">
              <source_doc>
                <restaurant simpl:ref="19419022"/>
              </source_doc>
              <media>
                <image location="http://a2.urbancdn.com/w/s/i5/8jitrnx42Q2quQ-130.jpg" simpl:id="5554872">
                  <clippings_this_is_in>
                    <image_clipping simpl:ref="32249716"/>
                  </clippings_this_is_in>
                </image>
              </media>
            </image_clipping>
          </clippings>
          <place mm_name="place" location="http://www.urbanspoon.com/u/map/875031/restaurant/College-Station/Christophers-World-Grill-Bryan" telephone="(979) 776-2181" street_address="5001 Boonville Rd" locality="Bryan" region="TX" postal_code="77802"></place>
          <image simpl:ref="5554872"/>
          <genres>
            <restaurant_genre mm_name="urban_spoon_genre" location="http://www.urbanspoon.com/f/114/11800/College-Station/American-Restaurants">
              <title>American</title>
              <description>/f/114/11800/College-Station/American-Restaurants</description>
            </restaurant_genre>
            <restaurant_genre mm_name="urban_spoon_genre" location="http://www.urbanspoon.com/f/114/11830/College-Station/Steakhouses">
              <title>Steakhouse</title>
              <description>/f/114/11830/College-Station/Steakhouses</description>
            </restaurant_genre>
            <restaurant_genre mm_name="urban_spoon_genre" location="http://www.urbanspoon.com/f/114/11826/College-Station/Seafood-Restaurants">
              <title>Seafood</title>
              <description>/f/114/11826/College-Station/Seafood-Restaurants</description>
            </restaurant_genre>
          </genres>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1529925/restaurant/College-Station/The-Lemon-Wedge-Bryan">
          <title>The Lemon Wedge</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1344263/restaurant/Must-Be-Heaven-College-Station">
          <title>Must Be Heaven</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1463523/restaurant/Fat-Burger-Grill-College-Station">
          <title>Fat Burger Grill</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875095/restaurant/College-Station/Longhorn-Tavern-Steak-House-Bryan">
          <title>Longhorn Tavern Steak House</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1505439/restaurant/College-Station/Cracker-Barrel-Bryan">
          <title>Cracker Barrel</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1655648/restaurant/Grub-Burger-Bar-College-Station">
          <title>Grub Burger Bar</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875278/restaurant/Harvey-Washbangers-College-Station">
          <title>Harvey Washbangers</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875263/restaurant/Fitzwillys-College-Station">
          <title>Fitzwilly&#39;s</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875226/restaurant/Cheddars-Casual-Cafe-College-Station">
          <title>Cheddar&#39;s Casual Cafe</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1344268/restaurant/College-Station/La-Riviera-Restaurant-Bryan">
          <title>La Riviera Restaurant</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875172/restaurant/College-Station/Wings-N-More-Express-Bryan">
          <title>Wings &#39;N More - Express</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875059/restaurant/College-Station/Feed-Barn-Bryan">
          <title>Feed Barn</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875214/restaurant/Buffalo-Wild-Wings-College-Station">
          <title>Buffalo Wild Wings</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1477203/restaurant/College-Station/Lennys-Sub-Shop-Bryan">
          <title>Lenny&#39;s Sub Shop</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1515946/restaurant/College-Station/Downtown-Uncorked-Wine-Bar-Bryan">
          <title>Downtown Uncorked Wine Bar</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1483409/restaurant/Fuddruckers-College-Station">
          <title>Fuddruckers</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1428216/restaurant/College-Station/Somerville/Sodolaks-Original-Country-Inn-Snook">
          <title>Sodolak&#39;s Original Country...</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875290/restaurant/Jamba-Juice-College-Station">
          <title>Jamba Juice</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1345169/restaurant/Chilis-Grill-Bar-College-Station">
          <title>Chili&#39;s Grill &amp; Bar</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1480728/restaurant/College-Station/Yesterdays-Bar-Grill-Bryan">
          <title>Yesterdays Bar &amp; Grill</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875002/restaurant/College-Station/Kotts-Cafe-Anderson">
          <title>Kott&#39;s Cafe</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1605396/restaurant/BJs-Restaurant-and-Brewhouse-College-Station">
          <title>BJ&#39;s Restaurant and...</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1661911/restaurant/Daily-Ruckus-College-Station">
          <title>Daily Ruckus</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1344269/restaurant/College-Station/The-Vintage-House-Restaurant-Messina-Hof-Winery-Bryan">
          <title>The Vintage House Restaurant...</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1574231/restaurant/College-Station/Spoons-Yogurt-Bryan">
          <title>Spoons Yogurt</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1498558/restaurant/Wingstop-College-Station">
          <title>Wingstop</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875074/restaurant/College-Station/Hot-Dogs-Etc-Bryan">
          <title>Hot Dogs, Etc.</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1465930/restaurant/College-Station/Cotton-Patch-Cafe-Bryan">
          <title>Cotton Patch Cafe</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1594159/restaurant/Maddens-Street-Cuisine-Mobile-Truck-College-Station">
          <title>Madden&#39;s Street Cuisine...</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1594586/restaurant/College-Station/Good-Time-Charleys-Grille-Pub-Bryan">
          <title>Good Time Charley&#39;s Grille &amp;...</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875241/restaurant/Corner-College-Station">
          <title>Corner</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875460/restaurant/College-Station/Filling-Station-Diner-Cafe-Navasota">
          <title>Filling Station Diner &amp; Cafe</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875099/restaurant/College-Station/Lubys-Bryan">
          <title>Luby&#39;s</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1503328/restaurant/College-Station/Kats-Kitchen-Caldwell">
          <title>Kat&#39;s Kitchen</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875004/restaurant/College-Station/Yankees-Tavern-Carlos-Anderson">
          <title>Yankee&#39;s Tavern @ Carlos</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1497555/restaurant/College-Station/IHOP-3024-Bryan">
          <title>IHOP #3024</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1581301/restaurant/College-Station/Wings-N-More-Villa-Maria-Bryan">
          <title>Wings N More - Villa Maria</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1581229/restaurant/College-Station/Stover-Bros-Cafe-Bryan">
          <title>Stover Bros Cafe</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875212/restaurant/Bostons-Restaurant-Sports-Bar-College-Station">
          <title>Boston&#39;s Restaurant &amp; Sports...</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875448/restaurant/College-Station/Iola-Cafe-Iola">
          <title>Iola Cafe</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1578130/restaurant/College-Station/J-R-wings-Hearne">
          <title>J &amp; R wings</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/875036/restaurant/College-Station/Country-Skillet-Bryan">
          <title>Country Skillet</title>
        </restaurant>
        <restaurant mm_name="urban_spoon_restaurant" location="http://www.urbanspoon.com/r/114/1548391/restaurant/College-Station/The-Corner-Cafe-Navasota">
          <title>The Corner Cafe&#39;</title>
        </restaurant>
      </restaurants>
    </restaurant_genre>
    <restaurant simpl:ref="19419022"/>-->
  </metadata>
</information_composition_declaration>