//
//  BackOffFromSiteSemanticAction.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/16/10.
//  Copyright 2010 Interface Ecology Lab. 
//

using System;
using Simpl.Serialization.Attributes;
using ecologylab.semantics.connectors;
using ecologylabSemantics.ecologylab.semantics.actions;

namespace ecologylab.semantics.actions 
{
	/// <summary>
	/// missing java doc comments or could not find the source file.
	/// </summary>
	[SimplInherit]
	[SimplTag("back_off_from_site")]
    public class BackOffFromSiteSemanticOperation : SemanticOperation 
	{
		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplScalar]
		private String domain;

        public BackOffFromSiteSemanticOperation()
		{ }

		public String Domain
		{
			get{return domain;}
			set{domain = value;}
		}

	    public override String GetOperationName()
	    {
		    return SemanticOperationStandardMethods.BACK_OFF_FROM_SITE;
	    }
        

	    public override void HandleError()
	    {
	    }

        public override Object Perform(Object obj)
        {
            return null;
        }

/*	    public Object Perform(Object obj)
	    {
		    if (domain != null)
		    {
			    SemanticsSite site	= sessionScope.MetaMetadataRepository.GetSite(domain);
			    site.etAbnormallyLongNextAvailableTime();
			
    //			debug("\t\t\tStep 2: Adding site to rejects");
    //			infoCollector.reject(domain);
	
			    debug("\t\t\tStep 2: Removing from current download Queues");
			    sessionScope.getDownloadMonitors().killSite(site);
	
			    debug("\t\t\tStep 3: Removing from candidate pools");
			    Crawler crawler	= sessionScope.getCrawler();
			    if (crawler != null)
				    crawler.killSite(site);
		    }
		    return null;
	    }
*/
	}
}
