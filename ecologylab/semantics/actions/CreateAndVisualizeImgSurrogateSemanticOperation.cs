//
//  CreateAndVisualizeImgSurrogateSemanticAction.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/16/10.
//  Copyright 2010 Interface Ecology Lab. 
//

using System;
using System.Collections.Generic;
using Simpl.Fundamental.Net;
using Simpl.Serialization.Attributes;
using ecologylab.semantics.collecting;
using ecologylab.semantics.metadata.builtins;
using ecologylab.semantics.metametadata;
using ecologylabSemantics.ecologylab.semantics.actions;

namespace ecologylab.semantics.actions 
{
	/// <summary>
	/// missing java doc comments or could not find the source file.
	/// </summary>
	[SimplInherit]
	[SimplTag("create_and_visualize_img_surrogate")]
    public class CreateAndVisualizeImgSurrogateSemanticOperation : SemanticOperation 
	{
        public CreateAndVisualizeImgSurrogateSemanticOperation()
		{ }
	    
	    public override String GetOperationName()
	    {
		    return SemanticOperationStandardMethods.CREATE_AND_VISUALIZE_IMG_SURROGATE;
	    }

	    public override void HandleError()
	    {
	    }

/*        public override Object Perform(Object obj)
        {
            return null;
        }
*/
	    public override Object Perform(Object obj)
	    {
		    Document source	= ResolveSourceDocument();

		    Image image = (Image) GetArgumentObject(SemanticOperationNamedArguments.METADATA);
		    if (image == null)
		    {
			    ParsedUri imagePURL = (ParsedUri) GetArgumentObject(SemanticOperationNamedArguments.IMAGE_PURL);
/*			    if (imagePURL != null)
			    {
				    image								= sessionScope.GetOrConstructImage(imagePURL);
				
				    //TODO -- if it already exists: (1) do we need to download??
				    //															(2) should we merge metadata
			    }
*/
		    }
		    else
		    {
			    //TODO add to global collections?! if already there merge!
		    }
		    if (image != null && image.Location != null)
		    {
			    image.SemanticsSessionScope = sessionScope as SemanticsSessionScope;

			    Document mixin = (Document) GetArgumentObject(SemanticOperationNamedArguments.MIXIN);
			    if (mixin != null)
				    image.AddMixin(mixin);
			
			    Object captionObject = GetArgumentObject(SemanticOperationNamedArguments.CAPTION);
                String caption = (captionObject != null) ? captionObject.ToString() : null;

                int width  		 		 		= GetArgumentInteger(SemanticOperationNamedArguments.WIDTH, 0);
			    int height  		 		 	= GetArgumentInteger(SemanticOperationNamedArguments.HEIGHT, 0);
			
			    ParsedUri hrefPURL 		= (ParsedUri) GetArgumentObject(SemanticOperationNamedArguments.HREF);
			    Document outlink 			= (Document) GetArgumentObject(SemanticOperationNamedArguments.HREF_METADATA);
			    if (hrefPURL != null & outlink == null)
				    outlink				= sessionScope.GetOrConstructDocument(hrefPURL);
			
			    ImageClipping imageClipping	= image.ConstructClipping(source, outlink, caption, null);
                source.AddClipping(imageClipping);

		        DocumentClosure imageClosure;
                
                if (this.sessionScope is SemanticsSessionScope &&
                    (this.sessionScope as SemanticsSessionScope).MetadataServicesClient != null)
                {
                    imageClosure = image.GetOrConstructClosure();

                    if (documentParser != null)
                    {
                    }
                    else
                    {
                        //imageClosure.RequestMetadata();
                    }
                }
                else
		        {
		            image.GetOrConstructClosure();
		        }

			    return image;
		    }
		    else
		    {
			    MetaMetadata mm	= GetMetaMetadata();
			    String mmString	= mm != null ? mm.Name : "Couldn't getMetaMetadata()";
			    Console.WriteLine("Can't createAndVisualizeImgSurrogate because null PURL: " + mmString
					    + " - " + source.Location);
		    }

		    return null;
	    }

	}
}
