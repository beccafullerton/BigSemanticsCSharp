//
//  Metadata.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/02/10.
//  Copyright 2010 Interface Ecology Lab. 
//


using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using Simpl.Fundamental.Net;
using Simpl.Serialization.Attributes;
using Simpl.Serialization;
using ecologylab.semantics.metadata.builtins.declarations;
using ecologylab.semantics.metadata.scalar;
using ecologylab.semantics.metametadata;


namespace ecologylab.semantics.metadata
{
	[SimplInherit]
	public class Metadata : MetadataDeclaration
    {

        /**
	    * Hidden reference to the MetaMetadataRepository. DO NOT access this field directly. DO NOT
	    * create a static public accessor. -- andruid 10/7/09.
	    */
        private static MetaMetadataRepository repository;

        private MetaMetadataCompositeField metaMetadata;

        private ClassDescriptor classDescriptor;

		public Metadata()
		{ }

        public Metadata(MetaMetadataCompositeField metaMetadata) : this()
        {
            if (metaMetadata != null)
            {
                this.metaMetadata = metaMetadata;
                string metaMetadataName = metaMetadata.Name;
                if (ClassDescriptor.TagName != metaMetadataName)
                    this.MetaMetadataName = new MetadataString(metaMetadataName);
            }
        }

        public MetaMetadataCompositeField MetaMetadata
        {
            get { return metaMetadata ?? GetMetaMetadata(); }
            set { metaMetadata = value; }
        }

        public ClassDescriptor ClassDescriptor
        {
            get { return classDescriptor ?? (classDescriptor = ClassDescriptor.GetClassDescriptor(this)); }
            private set { classDescriptor = value; }
        }

        public virtual MetadataParsedURL Location
        {
            get { return null; }
        }

	    public virtual bool IsImage
	    {
	        get { return false; }
	    }

	    private MetaMetadataCompositeField GetMetaMetadata()
        {
            MetaMetadataCompositeField mm = metaMetadata;

            if (repository == null)
                repository = MetaMetadataRepositoryInit.getRepository();

            if (mm == null && repository != null)
            {
                if (MetaMetadataName != null) // get from saved composition
                    mm = repository.GetMMByName(MetaMetadataName.Value);

                if (mm == null)
                {
                    ParsedUri location = Location == null ? null : Location.Value;
                    if (location != null)
                    {
                        mm = IsImage ? repository.GetImageMM(location) : repository.GetDocumentMM(location);

                        // TODO -- also try to resolve by mime type ???
                    }
                    if (mm == null)
                        mm = repository.GetByClass(this.GetType());
                    if (mm == null && ClassDescriptor != null)
                    {
                        mm = repository.GetMMByName(ClassDescriptor.TagName);
                    }
                }

                if (mm != null)
                    MetaMetadata = mm;
            }
            return mm;
        }

        public MetaMetadataOneLevelNestingEnumerator MetaMetadataIterator(MetaMetadataField metaMetadataField = null)
        {
            MetaMetadataField firstMetaMetadataField = metaMetadataField ?? this.MetaMetadata;
            return new MetaMetadataOneLevelNestingEnumerator(firstMetaMetadataField, this, Mixins);
        }

        public void AddMixin(Metadata mixin)
        {
            if (Mixins == null)
            {
                Mixins = new List<Metadata>();
            }
            Mixins.Add(mixin);
        }

	}
}
