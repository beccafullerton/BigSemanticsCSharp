//
//  Surrogate.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 02/02/11.
//  Copyright 2011 Interface Ecology Lab. 
//

using System;
using System.Collections.Generic;
using Simpl.Serialization.Attributes;
using ecologylab.semantics.metadata.scalar;
using ecologylab.semantics.metadata;

namespace ecologylab.semantics.metadata.builtins 
{
	/// <summary>
	/// missing java doc comments or could not find the source file.
	/// </summary>
	[SimplDescriptorClasses(new Type[] { typeof(MetadataClassDescriptor), typeof(MetadataFieldDescriptor) })]
	public class Surrogate : Metadata
	{
		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplComposite]
		private Metadata clipping;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplScalar]
		private MetadataString context;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplComposite]
		private Document source;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[SimplComposite]
		private Document outLink;

		public Surrogate()
		{ }

		public Metadata Clipping
		{
			get{return clipping;}
			set{if (this.clipping != value) { this.clipping = value; this.RaisePropertyChanged(() => this.Clipping); }}
		}

		public MetadataString Context
		{
			get{return context;}
			set{if (this.context != value) { this.context = value; this.RaisePropertyChanged(() => this.Context); }}
		}

		public Document Source
		{
			get{return source;}
			set{if (this.source != value) { this.source = value; this.RaisePropertyChanged(() => this.Source); }}
		}

		public Document OutLink
		{
			get{return outLink;}
			set{if (this.outLink != value) { this.outLink = value; this.RaisePropertyChanged(() => this.OutLink); }}
		}
	}
}
