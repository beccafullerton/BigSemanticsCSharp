//
//  MetaMetadataCollectionField.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/16/10.
//  Copyright 2010 Interface Ecology Lab. 
//

using System;
using System.Collections.Generic;
using ecologylab.attributes;
using ecologylab.semantics.metadata;
using ecologylab.generic;
using ecologylab.serialization;

namespace ecologylab.semantics.metametadata 
{
	/// <summary>
	/// missing java doc comments or could not find the source file.
	/// </summary>
	[simpl_inherit]
	[xml_tag("collection")]
	public class MetaMetadataCollectionField : MetaMetadataNestedField
	{
        public static readonly String UNRESOLVED_NAME = "&UNRESOLVED_NAME";
		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String childTag;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String childType;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private Boolean childEntity;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private Boolean noWrap;

        [simpl_scalar]
        private Boolean parseAsHypertext;

		public MetaMetadataCollectionField()
		{ }

        protected override string GetMetaMetadataTagToInheritFrom()
        {
            if (childEntity)
                return DocumentParserTagNames.ENTITY;
            else if (childType != null)
                return childType;
            else
                return null;
        }


		public String ChildTag
		{
			get{return childTag;}
			set{childTag = value;}
		}

		public String ChildType
		{
			get{return childType;}
			set{childType = value;}
		}

		public Boolean ChildEntity
		{
			get{return childEntity;}
			set{childEntity = value;}
		}

		public Boolean NoWrap
		{
			get{return noWrap;}
			set{noWrap = value;}
		}

        public Boolean ParseAsHypertext
        {
            get { return parseAsHypertext; }
            set { parseAsHypertext = value; }
        }

        public override MetaMetadataCompositeField getMetaMetadataCompositeField()
        {
            return GetChildComposite();
        }

        public MetaMetadataCompositeField GetChildComposite()
        {
            return (kids != null && kids.Count > 0) ? (MetaMetadataCompositeField)kids.ElementAt(0) : null;
        }

        public String DetermineCollectionChildType()
        {
            return (!childEntity) ? childType : DocumentParserTagNames.ENTITY;
        }

        public override void DeserializationPostHook()
	    {
		    String childType = DetermineCollectionChildType();
		    MetaMetadataCompositeField composite = new MetaMetadataCompositeField(childType ?? UNRESOLVED_NAME, kids)
		                                               {
		                                                   Parent = this,
		                                                   Type = childType
		                                               };
            if (kids != null)
		        kids.Clear();
		    else
                kids = new DictionaryList<String, MetaMetadataField>();

            kids.Add(composite.Name, composite);
		    //composite.setPromoteChildren(this.shouldPromoteChildren());
	    }

        protected override bool bindMetadataFieldDescriptor(TranslationScope metadataTScope, MetadataClassDescriptor metadataClassDescriptor)
        {
            String fieldName = this.GetFieldNameInCamelCase(false);
            MetadataFieldDescriptor metadataFieldDescriptor = (MetadataFieldDescriptor)metadataClassDescriptor.
               getFieldDescriptorByFieldName(fieldName);
            // if we don't have a field, then this is a wrapped collection, so we need to get the wrapped
            // field descriptor
            if (metadataFieldDescriptor != null)
            {
                if (metadataFieldDescriptor.Field == null)
                    metadataFieldDescriptor = (MetadataFieldDescriptor)metadataFieldDescriptor.WrappedFieldDescriptor;

                this.MetadataFieldDescriptor = metadataFieldDescriptor;
            }

            return (metadataFieldDescriptor != null);
        }

        internal override bool GetClassAndBindDescriptors(TranslationScope metadataTScope)
        {
            return GetChildComposite().GetClassAndBindDescriptors(metadataTScope);
        }
	}
}
