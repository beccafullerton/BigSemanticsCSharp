//
//  MetaMetadataField.cs
//  s.im.pl serialization
//
//  Generated by DotNetTranslator on 11/16/10.
//  Copyright 2010 Interface Ecology Lab. 
//

using System;
using System.Collections.Generic;
using ecologylab.attributes;
using ecologylab.serialization;
using ecologylab.serialization.types.element;

namespace ecologylab.semantics.metametadata 
{
	/// <summary>
	/// missing java doc comments or could not find the source file.
	/// </summary>
	[simpl_inherit]
	public class MetaMetadataField : ElementState, Mappable
	{
		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String name;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String comment;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String tag;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String xpath;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String contextNode;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[xml_tag("extends")]
		[simpl_scalar]
		private String extendsAttribute;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_map]
		[simpl_classes(new Type[] { typeof(MetaMetadataField), typeof(MetaMetadataScalarField), typeof(MetaMetadataCompositeField), typeof(MetaMetadataCollectionField) })]
		[simpl_nowrap]
		private Dictionary<String, MetaMetadataField> kids;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private Boolean hide;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private Boolean alwaysShow;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String style;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private Single layer;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String navigatesTo;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String shadows;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private String label;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private Boolean isFacet;

		/// <summary>
		/// missing java doc comments or could not find the source file.
		/// </summary>
		[simpl_scalar]
		private Boolean ignoreInTermVector;

		public MetaMetadataField()
		{ }

		public String Name
		{
			get{return name;}
			set{name = value;}
		}

		public String Comment
		{
			get{return comment;}
			set{comment = value;}
		}

		public String Tag
		{
			get{return tag;}
			set{tag = value;}
		}

		public String Xpath
		{
			get{return xpath;}
			set{xpath = value;}
		}

		public String ContextNode
		{
			get{return contextNode;}
			set{contextNode = value;}
		}

		public String ExtendsAttribute
		{
			get{return extendsAttribute;}
			set{extendsAttribute = value;}
		}

		public Dictionary<String, MetaMetadataField> Kids
		{
			get{return kids;}
			set{kids = value;}
		}

		public Boolean Hide
		{
			get{return hide;}
			set{hide = value;}
		}

		public Boolean AlwaysShow
		{
			get{return alwaysShow;}
			set{alwaysShow = value;}
		}

		public String Style
		{
			get{return style;}
			set{style = value;}
		}

		public Single Layer
		{
			get{return layer;}
			set{layer = value;}
		}

		public String NavigatesTo
		{
			get{return navigatesTo;}
			set{navigatesTo = value;}
		}

		public String Shadows
		{
			get{return shadows;}
			set{shadows = value;}
		}

		public String Label
		{
			get{return label;}
			set{label = value;}
		}

		public Boolean IsFacet
		{
			get{return isFacet;}
			set{isFacet = value;}
		}

		public Boolean IgnoreInTermVector
		{
			get{return ignoreInTermVector;}
			set{ignoreInTermVector = value;}
		}

		public Object key()
		{
			throw new NotImplementedException();
		}
	}
}
